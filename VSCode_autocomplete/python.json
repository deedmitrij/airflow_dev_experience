{
"BashOperator":{
    "prefix": "BashOperator",
    "body": [
        "BashOperator(",
"    task_id='run_after_loop',",
"    bash_command='echo 1',",
"    dag=dag",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/bash.html#bashoperator",
""
    ]
},
"PythonOperator":{
    "prefix": "PythonOperator",
    "body": [
        "PythonOperator(",
"    task_id='print_the_context',",
"    python_callable=print_context,",
"    dag=dag",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/python.html#pythonoperator",
""
    ]
},
"PythonVirtualenvOperator":{
    "prefix": "PythonVirtualenvOperator",
    "body": [
        "PythonVirtualenvOperator(",
"    task_id='virtualenv_python',",
"    python_callable=callable_virtualenv,",
"    requirements=['colorama==0.4.0'],",
"    system_site_packages=False,",
"    dag=dag",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/python.html#pythonvirtualenvoperator",
""
    ]
},
"ExternalTaskSensor":{
    "prefix": "ExternalTaskSensor",
    "body": [
        "ExternalTaskSensor(",
"        task_id='child_task1',",
"        external_dag_id=parent_dag.dag_id,",
"        external_task_id=parent_task.task_id,",
"        timeout=600,",
"        allowed_states=['success'],",
"        failed_states=['failed', 'skipped'],",
"        mode='reschedule',",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/external_task_sensor.html#externaltasksensor",
""
    ]
},
"HttpSensor":{
    "prefix": "HttpSensor",
    "body": [
        "HttpSensor(",
"    task_id='http_sensor_check',",
"    http_conn_id='http_default',",
"    endpoint=',",
"    request_params={},",
"    response_check=lambda response: 'httpbin' in response.text,",
"    poke_interval=5,",
"    dag=dag",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-http/stable/operators.html#httpsensor",
""
    ]
},
"SimpleHttpOperator":{
    "prefix": "SimpleHttpOperator",
    "body": [
        "SimpleHttpOperator(",
"    task_id='post_op',",
"    endpoint='post',",
"    data=json.dumps({'priority': 5}),",
"    headers={'Content-Type': 'application/json'},",
"    response_check=lambda response: response.json()['json']['priority'] == 5,",
"    dag=dag",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-http/stable/operators.html#simplehttpoperator",
""
    ]
},
"MySqlOperator":{
    "prefix": "MySqlOperator",
    "body": [
        "MySqlOperator(",
"    task_id='create_table_mysql', mysql_conn_id='mysql_conn_id', sql=r''DROP TABLE table_name;'', dag=dag",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-mysql/stable/operators.html#id1",
""
    ]
},
"JdbcOperator":{
    "prefix": "JdbcOperator",
    "body": [
        "JdbcOperator(",
"        task_id='insert_data',",
"        sql='insert into my_schema.my_table select dt, value from my_schema.source_data',",
"        jdbc_conn_id='my_jdbc_connection',",
"        autocommit=True,",
"        dag=dag,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-jdbc/stable/operators.html#usage",
""
    ]
},
"BeamRunPythonPipelineOperator":{
    "prefix": "BeamRunPythonPipelineOperator",
    "body": [
        "BeamRunPythonPipelineOperator(",
"    task_id='start_python_pipeline_local_direct_runner',",
"    py_file='apache_beam.examples.wordcount',",
"    py_options=['-m'],",
"    py_requirements=['apache-beam[gcp]==2.26.0'],",
"    py_interpreter='python3',",
"    py_system_site_packages=False",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-apache-beam/stable/operators.html#python-pipelines-with-directrunner",
""
    ]
},
"GCSToLocalFilesystemOperator":{
    "prefix": "GCSToLocalFilesystemOperator",
    "body": [
        "GCSToLocalFilesystemOperator(",
"    task_id='jar_to_local_direct_runner',",
"    bucket=GCS_JAR_DIRECT_RUNNER_BUCKET_NAME,",
"    object_name=GCS_JAR_DIRECT_RUNNER_OBJECT_NAME,",
"    filename='/tmp/beam_wordcount_direct_runner_{{ ds_nodash }}.jar'",
")",
"",
"start_java_pipeline_direct_runner = BeamRunJavaPipelineOperator(",
"    task_id='start_java_pipeline_direct_runner',",
"    jar='/tmp/beam_wordcount_direct_runner_{{ ds_nodash }}.jar',",
"    pipeline_options={",
"        'output': '/tmp/start_java_pipeline_direct_runner',",
"        'inputFile': GCS_INPUT,",
"    },",
"    job_class='org.apache.beam.examples.WordCount'",
")",
"",
"jar_to_local_direct_runner &gt;&gt; start_java_pipeline_direct_runner'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-apache-beam/stable/operators.html#java-pipelines-with-directrunner",
""
    ]
},
"CassandraTableSensor":{
    "prefix": "CassandraTableSensor",
    "body": [
        "CassandraTableSensor(",
"    task_id='cassandra_table_sensor',",
"    cassandra_conn_id='cassandra_default',",
"    table='keyspace_name.table_name'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-apache-cassandra/stable/operators.html#waiting-for-a-table-to-be-created",
""
    ]
},
"CassandraRecordSensor":{
    "prefix": "CassandraRecordSensor",
    "body": [
        "CassandraRecordSensor(",
"    task_id='cassandra_record_sensor',",
"    cassandra_conn_id='cassandra_default',",
"    table='keyspace_name.table_name',",
"    keys={'p1': 'v1', 'p2': 'v2'}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-apache-cassandra/stable/operators.html#waiting-for-a-record-to-be-created",
""
    ]
},
"SparkJDBCOperator":{
    "prefix": "SparkJDBCOperator",
    "body": [
        "SparkJDBCOperator(",
"    cmd_type='jdbc_to_spark',",
"    jdbc_table='foo',",
"    spark_jars='${SPARK_HOME}/jars/postgresql-42.2.12.jar',",
"    jdbc_driver='org.postgresql.Driver',",
"    metastore_table='bar',",
"    save_mode='overwrite',",
"    save_format='JSON',",
"    task_id='jdbc_to_spark_job'",
")",
"",
"spark_to_jdbc_job = SparkJDBCOperator(",
"    cmd_type='spark_to_jdbc',",
"    jdbc_table='foo',",
"    spark_jars='${SPARK_HOME}/jars/postgresql-42.2.12.jar',",
"    jdbc_driver='org.postgresql.Driver',",
"    metastore_table='bar',",
"    save_mode='append',",
"    task_id='spark_to_jdbc_job'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-apache-spark/stable/operators.html#using-the-operator",
""
    ]
},
"SparkSqlOperator":{
    "prefix": "SparkSqlOperator",
    "body": [
        "SparkSqlOperator(sql='SELECT * FROM bar', master='local', task_id='sql_job",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-apache-spark/stable/operators.html#id1",
""
    ]
},
"SparkSubmitOperator":{
    "prefix": "SparkSubmitOperator",
    "body": [
        "SparkSubmitOperator(",
"    application='${SPARK_HOME}/examples/src/main/python/pi.py', task_id='submit_job'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-apache-spark/stable/operators.html#id3",
""
    ]
},
"KubernetesPodOperator":{
    "prefix": "KubernetesPodOperator",
    "body": [
        "KubernetesPodOperator(",
"        namespace='default',",
"        image='quay.io/apache/bash',",
"        image_pull_secrets=[k8s.V1LocalObjectReference('testquay')],",
"        cmds=['bash', '-cx'],",
"        arguments=['echo', '10', 'echo pwd'],",
"        labels={'foo': 'bar'},",
"        name='airflow-private-image-pod',",
"        is_delete_operator_pod=True,",
"        in_cluster=True,",
"        task_id='task-two',",
"        get_logs=True,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-cncf-kubernetes/stable/operators.html#how-to-use-private-images-container-registry",
""
    ]
},
"CloudFirestoreExportDatabaseOperator":{
    "prefix": "CloudFirestoreExportDatabaseOperator",
    "body": [
        "CloudFirestoreExportDatabaseOperator(",
"    task_id='export_database_to_gcs',",
"    project_id=FIRESTORE_PROJECT_ID,",
"    body={'outputUriPrefix': EXPORT_DESTINATION_URL, 'collectionIds': [EXPORT_COLLECTION_ID]}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/firebase/firestore.html#export-database",
""
    ]
},
"GoogleAnalyticsListAccountsOperator":{
    "prefix": "GoogleAnalyticsListAccountsOperator",
    "body": [
        "GoogleAnalyticsListAccountsOperator(task_id='list_account",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/analytics.html#list-the-accounts",
""
    ]
},
"GoogleAnalyticsGetAdsLinkOperator":{
    "prefix": "GoogleAnalyticsGetAdsLinkOperator",
    "body": [
        "GoogleAnalyticsGetAdsLinkOperator(",
"    web_property_ad_words_link_id=WEB_PROPERTY_AD_WORDS_LINK_ID,",
"    web_property_id=WEB_PROPERTY_ID,",
"    account_id=ACCOUNT_ID,",
"    task_id='get_ad_words_link'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/analytics.html#get-ad-words-link",
""
    ]
},
"GoogleAnalyticsRetrieveAdsLinksListOperator":{
    "prefix": "GoogleAnalyticsRetrieveAdsLinksListOperator",
    "body": [
        "GoogleAnalyticsRetrieveAdsLinksListOperator(",
"    task_id='list_ad_link', account_id=ACCOUNT_ID, web_property_id=WEB_PROPERTY_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/analytics.html#list-google-ads-links",
""
    ]
},
"GoogleCampaignManagerDeleteReportOperator":{
    "prefix": "GoogleCampaignManagerDeleteReportOperator",
    "body": [
        "GoogleCampaignManagerDeleteReportOperator(",
"    profile_id=PROFILE_ID, report_name=REPORT_NAME, task_id='delete_report'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/campaign_manager.html#deleting-a-report",
""
    ]
},
"GoogleCampaignManagerDownloadReportOperator":{
    "prefix": "GoogleCampaignManagerDownloadReportOperator",
    "body": [
        "GoogleCampaignManagerDownloadReportOperator(",
"    task_id='get_report',",
"    profile_id=PROFILE_ID,",
"    report_id=report_id,",
"    file_id=file_id,",
"    report_name='test_report.csv',",
"    bucket_name=BUCKET",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/campaign_manager.html#downloading-a-report",
""
    ]
},
"GoogleCampaignManagerReportSensor":{
    "prefix": "GoogleCampaignManagerReportSensor",
    "body": [
        "GoogleCampaignManagerReportSensor(",
"    task_id='wait_for_report',",
"    profile_id=PROFILE_ID,",
"    report_id=report_id,",
"    file_id=file_id",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/campaign_manager.html#waiting-for-a-report",
""
    ]
},
"GoogleCampaignManagerInsertReportOperator":{
    "prefix": "GoogleCampaignManagerInsertReportOperator",
    "body": [
        "GoogleCampaignManagerInsertReportOperator(",
"    profile_id=PROFILE_ID, report=REPORT, task_id='create_report'",
")report_id = '{{ task_instance.xcom_pull('create_report')['id'] }}'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/campaign_manager.html#inserting-a-new-report",
""
    ]
},
"GoogleCampaignManagerRunReportOperator":{
    "prefix": "GoogleCampaignManagerRunReportOperator",
    "body": [
        "GoogleCampaignManagerRunReportOperator(",
"    profile_id=PROFILE_ID, report_id=report_id, task_id='run_report'",
")file_id = '{{ task_instance.xcom_pull('run_report')['id'] }}'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/campaign_manager.html#running-a-report",
""
    ]
},
"GoogleCampaignManagerBatchInsertConversionsOperator":{
    "prefix": "GoogleCampaignManagerBatchInsertConversionsOperator",
    "body": [
        "GoogleCampaignManagerBatchInsertConversionsOperator(",
"    task_id='insert_conversion',",
"    profile_id=PROFILE_ID,",
"    conversions=[CONVERSION],",
"    encryption_source='AD_SERVING',",
"    encryption_entity_type='DCM_ADVERTISER',",
"    encryption_entity_id=ENCRYPTION_ENTITY_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/campaign_manager.html#inserting-a-conversions",
""
    ]
},
"GoogleCampaignManagerBatchUpdateConversionsOperator":{
    "prefix": "GoogleCampaignManagerBatchUpdateConversionsOperator",
    "body": [
        "GoogleCampaignManagerBatchUpdateConversionsOperator(",
"    task_id='update_conversion',",
"    profile_id=PROFILE_ID,",
"    conversions=[CONVERSION_UPDATE],",
"    encryption_source='AD_SERVING',",
"    encryption_entity_type='DCM_ADVERTISER',",
"    encryption_entity_id=ENCRYPTION_ENTITY_ID,",
"    max_failed_updates=1",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/campaign_manager.html#updating-a-conversions",
""
    ]
},
"GoogleDisplayVideo360CreateReportOperator":{
    "prefix": "GoogleDisplayVideo360CreateReportOperator",
    "body": [
        "GoogleDisplayVideo360CreateReportOperator(body=REPORT, task_id='create_report",
")report_id = '{{ task_instance.xcom_pull('create_report', key='report_id') }}'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#creating-a-report",
""
    ]
},
"GoogleDisplayVideo360DeleteReportOperator":{
    "prefix": "GoogleDisplayVideo360DeleteReportOperator",
    "body": [
        "GoogleDisplayVideo360DeleteReportOperator(report_id=report_id, task_id='delete_report",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#deleting-a-report",
""
    ]
},
"GoogleDisplayVideo360ReportSensor":{
    "prefix": "GoogleDisplayVideo360ReportSensor",
    "body": [
        "GoogleDisplayVideo360ReportSensor(task_id='wait_for_report', report_id=report_id)",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#waiting-for-report",
""
    ]
},
"GoogleDisplayVideo360DownloadReportOperator":{
    "prefix": "GoogleDisplayVideo360DownloadReportOperator",
    "body": [
        "GoogleDisplayVideo360DownloadReportOperator(",
"    report_id=report_id,",
"    task_id='get_report',",
"    bucket_name=BUCKET,",
"    report_name='test1.csv'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#downloading-a-report",
""
    ]
},
"GoogleDisplayVideo360RunReportOperator":{
    "prefix": "GoogleDisplayVideo360RunReportOperator",
    "body": [
        "GoogleDisplayVideo360RunReportOperator(",
"    report_id=report_id, params=PARAMS, task_id='run_report'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#running-a-report",
""
    ]
},
"GoogleDisplayVideo360DownloadLineItemsOperator":{
    "prefix": "GoogleDisplayVideo360DownloadLineItemsOperator",
    "body": [
        "GoogleDisplayVideo360DownloadLineItemsOperator(",
"    task_id='download_line_items',",
"    request_body=DOWNLOAD_LINE_ITEMS_REQUEST,",
"    bucket_name=BUCKET,",
"    object_name=OBJECT_NAME,",
"    gzip=False",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#downloading-line-items",
""
    ]
},
"GoogleDisplayVideo360UploadLineItemsOperator":{
    "prefix": "GoogleDisplayVideo360UploadLineItemsOperator",
    "body": [
        "GoogleDisplayVideo360UploadLineItemsOperator(",
"    task_id='upload_line_items',",
"    bucket_name=BUCKET,",
"    object_name=BUCKET_FILE_LOCATION",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#upload-line-items",
""
    ]
},
"GoogleDisplayVideo360CreateSDFDownloadTaskOperator":{
    "prefix": "GoogleDisplayVideo360CreateSDFDownloadTaskOperator",
    "body": [
        "GoogleDisplayVideo360CreateSDFDownloadTaskOperator(",
"    task_id='create_sdf_download_task', body_request=CREATE_SDF_DOWNLOAD_TASK_BODY_REQUEST",
")operation_name = '{{ task_instance.xcom_pull('create_sdf_download_task')['name'] }}'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#create-sdf-download-task",
""
    ]
},
"GoogleDisplayVideo360SDFtoGCSOperator":{
    "prefix": "GoogleDisplayVideo360SDFtoGCSOperator",
    "body": [
        "GoogleDisplayVideo360SDFtoGCSOperator(",
"    task_id='save_sdf_in_gcs',",
"    operation_name=operation_name,",
"    bucket_name=BUCKET,",
"    object_name=BUCKET_FILE_LOCATION,",
"    gzip=False",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#save-sdf-files-in-the-google-cloud-storage",
""
    ]
},
"GoogleDisplayVideo360GetSDFDownloadOperationSensor":{
    "prefix": "GoogleDisplayVideo360GetSDFDownloadOperationSensor",
    "body": [
        "GoogleDisplayVideo360GetSDFDownloadOperationSensor(",
"    task_id='wait_for_operation',",
"    operation_name=operation_name",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/display_video.html#waiting-for-sdf-operation",
""
    ]
},
"GoogleSearchAdsInsertReportOperator":{
    "prefix": "GoogleSearchAdsInsertReportOperator",
    "body": [
        "GoogleSearchAdsInsertReportOperator(report=REPORT, task_id='generate_report",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/search_ads.html#inserting-a-report",
""
    ]
},
"GoogleSearchAdsReportSensor":{
    "prefix": "GoogleSearchAdsReportSensor",
    "body": [
        "GoogleSearchAdsReportSensor(report_id=report_id, task_id='wait_for_report",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/search_ads.html#awaiting-for-a-report",
""
    ]
},
"GoogleSearchAdsDownloadReportOperator":{
    "prefix": "GoogleSearchAdsDownloadReportOperator",
    "body": [
        "GoogleSearchAdsDownloadReportOperator(",
"    report_id=report_id, bucket_name=GCS_BUCKET, task_id='download_report'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/marketing_platform/search_ads.html#downloading-a-report",
""
    ]
},
"GoogleSheetsCreateSpreadsheetOperator":{
    "prefix": "GoogleSheetsCreateSpreadsheetOperator",
    "body": [
        "GoogleSheetsCreateSpreadsheetOperator(",
"    task_id='create_spreadsheet', spreadsheet=SPREADSHEET",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/suite/sheets.html#create-spreadsheet",
""
    ]
},
"GoogleAdsToGcsOperator":{
    "prefix": "GoogleAdsToGcsOperator",
    "body": [
        "GoogleAdsToGcsOperator(",
"    client_ids=CLIENT_IDS,",
"    query=QUERY,",
"    attributes=FIELDS_TO_EXTRACT,",
"    obj=GCS_OBJ_PATH,",
"    bucket=BUCKET,",
"    task_id='run_operator'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/ads.html#google-ads-to-gcs",
""
    ]
},
"GoogleAdsListAccountsOperator":{
    "prefix": "GoogleAdsListAccountsOperator",
    "body": [
        "GoogleAdsListAccountsOperator(",
"    task_id='list_accounts', bucket=BUCKET, object_name=GCS_ACCOUNTS_CSV",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/ads.html#upload-google-ads-accounts-to-gcs",
""
    ]
},
"AzureFileShareToGCSOperator":{
    "prefix": "AzureFileShareToGCSOperator",
    "body": [
        "AzureFileShareToGCSOperator(",
"    task_id='sync_azure_files_with_gcs',",
"    share_name=AZURE_SHARE_NAME,",
"    dest_gcs=DEST_GCS_BUCKET,",
"    directory_name=AZURE_DIRECTORY_NAME,",
"    wasb_conn_id='azure_fileshare_default',",
"    gcp_conn_id='google_cloud_default',",
"    replace=False,",
"    gzip=True,",
"    google_impersonation_chain=None",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/azure_fileshare_to_gcs.html#data-transfer",
""
    ]
},
"FacebookAdsReportToGcsOperator":{
    "prefix": "FacebookAdsReportToGcsOperator",
    "body": [
        "FacebookAdsReportToGcsOperator(",
"        task_id='run_fetch_data',",
"        start_date=days_ago(2),",
"        owner='airflow',",
"        bucket_name=GCS_BUCKET,",
"        params=PARAMS,",
"        fields=FIELDS,",
"        gcp_conn_id=GCS_CONN_ID,",
"        object_name=GCS_OBJ_PATH,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/facebook_ads_to_gcs.html#facebookadsreporttogcsoperator",
""
    ]
},
"GCSToGCSOperator":{
    "prefix": "GCSToGCSOperator",
    "body": [
        "GCSToGCSOperator(",
"    task_id='copy_single_gcs_file',",
"    source_bucket=BUCKET_1_SRC,",
"    source_object=OBJECT_1,",
"    destination_bucket=BUCKET_1_DST,  # If not supplied the source_bucket value will be used",
"    destination_object='backup_' + OBJECT_1,  # If not supplied the source_object value will be used",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/gcs_to_gcs.html#copy-single-file",
""
    ]
},
"GCSSynchronizeBucketsOperator":{
    "prefix": "GCSSynchronizeBucketsOperator",
    "body": [
        "GCSSynchronizeBucketsOperator(",
"    task_id='sync_bucket', source_bucket=BUCKET_1_SRC, destination_bucket=BUCKET_1_DST",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/gcs_to_gcs.html#basic-synchronization",
""
    ]
},
"GCSToGoogleDriveOperator":{
    "prefix": "GCSToGoogleDriveOperator",
    "body": [
        "GCSToGoogleDriveOperator(",
"    task_id='copy_single_file',",
"    source_bucket=GCS_TO_GDRIVE_BUCKET,",
"    source_object='sales/january.avro',",
"    destination_object='copied_sales/january-backup.avro'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/gcs_to_gdrive.html#copy-single-files",
""
    ]
},
"GCSToSFTPOperator":{
    "prefix": "GCSToSFTPOperator",
    "body": [
        "GCSToSFTPOperator(",
"    task_id='file-copy-gsc-to-sftp',",
"    sftp_conn_id=SFTP_CONN_ID,",
"    source_bucket=BUCKET_SRC,",
"    source_object=OBJECT_SRC_1,",
"    destination_path=DESTINATION_PATH_1",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/gcs_to_sftp.html#copying-a-single-file",
""
    ]
},
"GCSToGoogleSheetsOperator":{
    "prefix": "GCSToGoogleSheetsOperator",
    "body": [
        "GCSToGoogleSheetsOperator(",
"    task_id='upload_gcs_to_sheet',",
"    bucket_name=BUCKET,",
"    object_name='{{ task_instance.xcom_pull('upload_sheet_to_gcs')[0] }}',",
"    spreadsheet_id=NEW_SPREADSHEET_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/gcs_to_sheets.html#upload-data-from-gcs-to-google-sheets",
""
    ]
},
"GoogleDriveToGCSOperator":{
    "prefix": "GoogleDriveToGCSOperator",
    "body": [
        "GoogleDriveToGCSOperator(",
"    task_id='upload_gdrive_object_to_gcs',",
"    folder_id=FOLDER_ID,",
"    file_name=FILE_NAME,",
"    destination_bucket=BUCKET,",
"    destination_object=OBJECT",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/gdrive_to_gcs.html#copy-single-files",
""
    ]
},
"GoogleDriveToLocalOperator":{
    "prefix": "GoogleDriveToLocalOperator",
    "body": [
        "GoogleDriveToLocalOperator(",
"    task_id='download_from_gdrive_to_local',",
"    folder_id=FOLDER_ID,",
"    file_name=FILE_NAME,",
"    output_file=OUTPUT_FILE",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/gdrive_to_local.html#gcstolocalfilesystemoperator",
""
    ]
},
"LocalFilesystemToGCSOperator":{
    "prefix": "LocalFilesystemToGCSOperator",
    "body": [
        "LocalFilesystemToGCSOperator(",
"        task_id='upload_file',",
"        src=PATH_TO_UPLOAD_FILE,",
"        dst=DESTINATION_FILE_LOCATION,",
"        bucket=BUCKET_NAME,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/local_to_gcs.html#localfilesystemtogcsoperator",
""
    ]
},
"MySQLToGCSOperator":{
    "prefix": "MySQLToGCSOperator",
    "body": [
        "MySQLToGCSOperator(",
"        task_id='mysql_to_gcs', sql=SQL_QUERY, bucket=GCS_BUCKET, filename=FILENAME, export_format='csv'",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/mysql_to_gcs.html#mysqltogcsoperator",
""
    ]
},
"OracleToGCSOperator":{
    "prefix": "OracleToGCSOperator",
    "body": [
        "OracleToGCSOperator(",
"        task_id='oracle_to_gcs', sql=SQL_QUERY, bucket=GCS_BUCKET, filename=FILENAME, export_format='csv'",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/oracle_to_gcs.html#oracletogcsoperator",
""
    ]
},
"PrestoToGCSOperator":{
    "prefix": "PrestoToGCSOperator",
    "body": [
        "PrestoToGCSOperator(",
"    task_id='presto_to_gcs_basic',",
"    sql=f'select * from {SOURCE_MULTIPLE_TYPES}',",
"    bucket=GCS_BUCKET,",
"    filename=f'{safe_name(SOURCE_MULTIPLE_TYPES)}.{{}}.json'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/presto_to_gcs.html#data-transfer",
""
    ]
},
"BigQueryExecuteQueryOperator":{
    "prefix": "BigQueryExecuteQueryOperator",
    "body": [
        "BigQueryExecuteQueryOperator(",
"    task_id='read_data_from_gcs_many_chunks',",
"    sql=f'SELECT COUNT(*) FROM `{GCP_PROJECT_ID}.{DATASET_NAME}.{safe_name(SOURCE_CUSTOMER_TABLE)}`',",
"    use_legacy_sql=False",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/presto_to_gcs.html#division-of-the-result-into-multiple-files",
""
    ]
},
"BigQueryCreateExternalTableOperator":{
    "prefix": "BigQueryCreateExternalTableOperator",
    "body": [
        "BigQueryCreateExternalTableOperator(",
"    task_id='create_external_table_multiple_types',",
"    bucket=GCS_BUCKET,",
"    source_objects=[f'{safe_name(SOURCE_MULTIPLE_TYPES)}.*.json'],",
"    source_format='NEWLINE_DELIMITED_JSON',",
"    destination_project_dataset_table=f'{DATASET_NAME}.{safe_name(SOURCE_MULTIPLE_TYPES)}',",
"    schema_object=f'{safe_name(SOURCE_MULTIPLE_TYPES)}-schema.json'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/presto_to_gcs.html#querying-data-using-the-bigquery",
""
    ]
},
"SalesforceToGcsOperator":{
    "prefix": "SalesforceToGcsOperator",
    "body": [
        "SalesforceToGcsOperator(",
"        query=QUERY,",
"        include_deleted=True,",
"        bucket_name=GCS_BUCKET,",
"        object_name=GCS_OBJ_PATH,",
"        salesforce_conn_id=SALESFORCE_CONN_ID,",
"        export_format='csv',",
"        coerce_to_timestamp=False,",
"        record_time_added=False,",
"        gcp_conn_id=GCS_CONN_ID,",
"        task_id='upload_to_gcs',",
"        dag=dag,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/salesforce_to_gcs.html#salesforcetogcsoperator",
""
    ]
},
"SFTPToGCSOperator":{
    "prefix": "SFTPToGCSOperator",
    "body": [
        "SFTPToGCSOperator(",
"    task_id='file-copy-sftp-to-gcs',",
"    source_path=os.path.join(TMP_PATH, DIR, OBJECT_SRC_1),",
"    destination_bucket=BUCKET_SRC",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/sftp_to_gcs.html#copying-single-files",
""
    ]
},
"GoogleSheetsToGCSOperator":{
    "prefix": "GoogleSheetsToGCSOperator",
    "body": [
        "GoogleSheetsToGCSOperator(",
"    task_id='upload_sheet_to_gcs',",
"    destination_bucket=BUCKET,",
"    spreadsheet_id=SPREADSHEET_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/transfer/sheets_to_gcs.html#upload-data-from-google-sheets-to-gcs",
""
    ]
},
"BigQueryCreateEmptyDatasetOperator":{
    "prefix": "BigQueryCreateEmptyDatasetOperator",
    "body": [
        "BigQueryCreateEmptyDatasetOperator(task_id='create-dataset', dataset_id=DATASET_NAME)",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#create-dataset",
""
    ]
},
"BigQueryGetDatasetOperator":{
    "prefix": "BigQueryGetDatasetOperator",
    "body": [
        "BigQueryGetDatasetOperator(task_id='get-dataset', dataset_id=DATASET_NAME)",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#get-dataset-details",
""
    ]
},
"BigQueryGetDatasetTablesOperator":{
    "prefix": "BigQueryGetDatasetTablesOperator",
    "body": [
        "BigQueryGetDatasetTablesOperator(",
"    task_id='get_dataset_tables', dataset_id=DATASET_NAME",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#list-tables-in-dataset",
""
    ]
},
"BigQueryUpdateTableOperator":{
    "prefix": "BigQueryUpdateTableOperator",
    "body": [
        "BigQueryUpdateTableOperator(",
"    task_id='update_table',",
"    dataset_id=DATASET_NAME,",
"    table_id='test_table',",
"    fields=[",
"        {'name': 'emp_name', 'type': 'STRING', 'mode': 'REQUIRED'},",
"        {'name': 'salary', 'type': 'INTEGER', 'mode': 'NULLABLE'},",
"    ],",
"    table_resource={",
"        'friendlyName': 'Updated Table',",
"        'description': 'Updated Table',",
"    }",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#update-table",
""
    ]
},
"BigQueryPatchDatasetOperator":{
    "prefix": "BigQueryPatchDatasetOperator",
    "body": [
        "BigQueryPatchDatasetOperator(",
"    task_id='patch_dataset',",
"    dataset_id=DATASET_NAME,",
"    dataset_resource={",
"        'friendlyName': 'Patched Dataset',",
"        'description': 'Patched dataset',",
"    }",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#patch-dataset",
""
    ]
},
"BigQueryUpdateDatasetOperator":{
    "prefix": "BigQueryUpdateDatasetOperator",
    "body": [
        "BigQueryUpdateDatasetOperator(",
"    task_id='update_dataset',",
"    dataset_id=DATASET_NAME,",
"    dataset_resource={'description': 'Updated dataset'}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#update-dataset",
""
    ]
},
"BigQueryDeleteDatasetOperator":{
    "prefix": "BigQueryDeleteDatasetOperator",
    "body": [
        "BigQueryDeleteDatasetOperator(",
"    task_id='delete_dataset', dataset_id=DATASET_NAME, delete_contents=True",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#delete-dataset",
""
    ]
},
"BigQueryCreateEmptyTableOperator":{
    "prefix": "BigQueryCreateEmptyTableOperator",
    "body": [
        "BigQueryCreateEmptyTableOperator(",
"    task_id='create_table',",
"    dataset_id=DATASET_NAME,",
"    table_id='test_table',",
"    schema_fields=[",
"        {'name': 'emp_name', 'type': 'STRING', 'mode': 'REQUIRED'},",
"        {'name': 'salary', 'type': 'INTEGER', 'mode': 'NULLABLE'},",
"    ]",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#create-native-table",
""
    ]
},
"BigQueryGetDataOperator":{
    "prefix": "BigQueryGetDataOperator",
    "body": [
        "BigQueryGetDataOperator(",
"    task_id='get_data',",
"    dataset_id=DATASET_NAME,",
"    table_id=TABLE_1,",
"    max_results=10,",
"    selected_fields='value,name',",
"    location=location",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#fetch-data-from-table",
""
    ]
},
"BigQueryUpsertTableOperator":{
    "prefix": "BigQueryUpsertTableOperator",
    "body": [
        "BigQueryUpsertTableOperator(",
"    task_id='upsert_table',",
"    dataset_id=DATASET_NAME,",
"    table_resource={",
"        'tableReference': {'tableId': 'test_table_id'},",
"        'expirationTime': (int(time.time()) + 300) * 1000,",
"    }",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#upsert-table",
""
    ]
},
"BigQueryDeleteTableOperator":{
    "prefix": "BigQueryDeleteTableOperator",
    "body": [
        "BigQueryDeleteTableOperator(",
"    task_id='delete_table',",
"    deletion_dataset_table=f'{PROJECT_ID}.{DATASET_NAME}.test_table'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#delete-table",
""
    ]
},
"BigQueryInsertJobOperator":{
    "prefix": "BigQueryInsertJobOperator",
    "body": [
        "BigQueryInsertJobOperator(",
"    task_id='insert_query_job',",
"    configuration={",
"        'query': {",
"            'query': INSERT_ROWS_QUERY,",
"            'useLegacySql': False,",
"        }",
"    },",
"    location=location",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#execute-bigquery-jobs",
""
    ]
},
"BigQueryCheckOperator":{
    "prefix": "BigQueryCheckOperator",
    "body": [
        "BigQueryCheckOperator(",
"    task_id='check_count',",
"    sql=f'SELECT COUNT(*) FROM {DATASET_NAME}.{TABLE_1}',",
"    use_legacy_sql=False,",
"    location=location",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#check-if-query-result-has-data",
""
    ]
},
"BigQueryValueCheckOperator":{
    "prefix": "BigQueryValueCheckOperator",
    "body": [
        "BigQueryValueCheckOperator(",
"    task_id='check_value',",
"    sql=f'SELECT COUNT(*) FROM {DATASET_NAME}.{TABLE_1}',",
"    pass_value=4,",
"    use_legacy_sql=False,",
"    location=location",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#compare-query-result-to-pass-value",
""
    ]
},
"BigQueryIntervalCheckOperator":{
    "prefix": "BigQueryIntervalCheckOperator",
    "body": [
        "BigQueryIntervalCheckOperator(",
"    task_id='check_interval',",
"    table=f'{DATASET_NAME}.{TABLE_1}',",
"    days_back=1,",
"    metrics_thresholds={'COUNT(*): 1.5},",
"    use_legacy_sql=False,",
"    location=location",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#compare-metrics-over-time",
""
    ]
},
"BigQueryTableExistenceSensor":{
    "prefix": "BigQueryTableExistenceSensor",
    "body": [
        "BigQueryTableExistenceSensor(",
"    task_id='check_table_exists', project_id=PROJECT_ID, dataset_id=DATASET_NAME, table_id=TABLE_NAME",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#check-that-a-table-exists",
""
    ]
},
"BigQueryTablePartitionExistenceSensor":{
    "prefix": "BigQueryTablePartitionExistenceSensor",
    "body": [
        "BigQueryTablePartitionExistenceSensor(",
"    task_id='check_table_partition_exists',",
"    project_id=PROJECT_ID,",
"    dataset_id=DATASET_NAME,",
"    table_id=TABLE_NAME,",
"    partition_id=PARTITION_NAME",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery.html#check-that-a-table-partition-exists",
""
    ]
},
"CloudDataFusionRestartInstanceOperator":{
    "prefix": "CloudDataFusionRestartInstanceOperator",
    "body": [
        "CloudDataFusionRestartInstanceOperator(",
"    location=LOCATION, instance_name=INSTANCE_NAME, task_id='restart_instance'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#restart-datafusion-instance",
""
    ]
},
"CloudDataFusionDeleteInstanceOperator":{
    "prefix": "CloudDataFusionDeleteInstanceOperator",
    "body": [
        "CloudDataFusionDeleteInstanceOperator(",
"    location=LOCATION, instance_name=INSTANCE_NAME, task_id='delete_instance'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#delete-datafusion-instance",
""
    ]
},
"CloudDataFusionCreateInstanceOperator":{
    "prefix": "CloudDataFusionCreateInstanceOperator",
    "body": [
        "CloudDataFusionCreateInstanceOperator(",
"    location=LOCATION,",
"    instance_name=INSTANCE_NAME,",
"    instance=INSTANCE,",
"    task_id='create_instance'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#create-datafusion-instance",
""
    ]
},
"CloudDataFusionUpdateInstanceOperator":{
    "prefix": "CloudDataFusionUpdateInstanceOperator",
    "body": [
        "CloudDataFusionUpdateInstanceOperator(",
"    location=LOCATION,",
"    instance_name=INSTANCE_NAME,",
"    instance=INSTANCE,",
"    update_mask='instance.displayName',",
"    task_id='update_instance'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#update-datafusion-instance",
""
    ]
},
"CloudDataFusionGetInstanceOperator":{
    "prefix": "CloudDataFusionGetInstanceOperator",
    "body": [
        "CloudDataFusionGetInstanceOperator(",
"    location=LOCATION, instance_name=INSTANCE_NAME, task_id='get_instance'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#get-datafusion-instance",
""
    ]
},
"CloudDataFusionCreatePipelineOperator":{
    "prefix": "CloudDataFusionCreatePipelineOperator",
    "body": [
        "CloudDataFusionCreatePipelineOperator(",
"    location=LOCATION,",
"    pipeline_name=PIPELINE_NAME,",
"    pipeline=PIPELINE,",
"    instance_name=INSTANCE_NAME,",
"    task_id='create_pipeline'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#create-a-datafusion-pipeline",
""
    ]
},
"CloudDataFusionStartPipelineOperator":{
    "prefix": "CloudDataFusionStartPipelineOperator",
    "body": [
        "CloudDataFusionStartPipelineOperator(",
"    location=LOCATION,",
"    pipeline_name=PIPELINE_NAME,",
"    instance_name=INSTANCE_NAME,",
"    task_id='start_pipeline'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#start-a-datafusion-pipeline",
""
    ]
},
"CloudDataFusionStopPipelineOperator":{
    "prefix": "CloudDataFusionStopPipelineOperator",
    "body": [
        "CloudDataFusionStopPipelineOperator(",
"    location=LOCATION,",
"    pipeline_name=PIPELINE_NAME,",
"    instance_name=INSTANCE_NAME,",
"    task_id='stop_pipeline'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#stop-a-datafusion-pipeline",
""
    ]
},
"CloudDataFusionDeletePipelineOperator":{
    "prefix": "CloudDataFusionDeletePipelineOperator",
    "body": [
        "CloudDataFusionDeletePipelineOperator(",
"    location=LOCATION,",
"    pipeline_name=PIPELINE_NAME,",
"    instance_name=INSTANCE_NAME,",
"    task_id='delete_pipeline'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#delete-a-datafusion-pipeline",
""
    ]
},
"CloudDataFusionListPipelinesOperator":{
    "prefix": "CloudDataFusionListPipelinesOperator",
    "body": [
        "CloudDataFusionListPipelinesOperator(",
"    location=LOCATION, instance_name=INSTANCE_NAME, task_id='list_pipelines'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datafusion.html#list-datafusion-pipelines",
""
    ]
},
"AutoMLCreateDatasetOperator":{
    "prefix": "AutoMLCreateDatasetOperator",
    "body": [
        "AutoMLCreateDatasetOperator(",
"    task_id='create_dataset_task',",
"    dataset=DATASET,",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"",
"dataset_id = '{{ task_instance.xcom_pull('create_dataset_task', key='dataset_id') }}'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#creating-datasets",
""
    ]
},
"AutoMLImportDataOperator":{
    "prefix": "AutoMLImportDataOperator",
    "body": [
        "AutoMLImportDataOperator(",
"    task_id='import_dataset_task',",
"    dataset_id=dataset_id,",
"    location=GCP_AUTOML_LOCATION,",
"    input_config=IMPORT_INPUT_CONFIG",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#creating-datasets",
""
    ]
},
"AutoMLTablesListTableSpecsOperator":{
    "prefix": "AutoMLTablesListTableSpecsOperator",
    "body": [
        "AutoMLTablesListTableSpecsOperator(",
"    task_id='list_tables_spec_task',",
"    dataset_id=dataset_id,",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#listing-table-and-columns-specs",
""
    ]
},
"AutoMLTablesListColumnSpecsOperator":{
    "prefix": "AutoMLTablesListColumnSpecsOperator",
    "body": [
        "AutoMLTablesListColumnSpecsOperator(",
"    task_id='list_columns_spec_task',",
"    dataset_id=dataset_id,",
"    table_spec_id='{{ extract_object_id(task_instance.xcom_pull('list_tables_spec_task')[0]) }}',",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#listing-table-and-columns-specs",
""
    ]
},
"AutoMLTrainModelOperator":{
    "prefix": "AutoMLTrainModelOperator",
    "body": [
        "AutoMLTrainModelOperator(",
"    task_id='create_model_task',",
"    model=MODEL,",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"",
"model_id = '{{ task_instance.xcom_pull('create_model_task', key='model_id') }}'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#operations-on-models",
""
    ]
},
"AutoMLGetModelOperator":{
    "prefix": "AutoMLGetModelOperator",
    "body": [
        "AutoMLGetModelOperator(",
"    task_id='get_model_task',",
"    model_id=MODEL_ID,",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#operations-on-models",
""
    ]
},
"AutoMLDeployModelOperator":{
    "prefix": "AutoMLDeployModelOperator",
    "body": [
        "AutoMLDeployModelOperator(",
"    task_id='deploy_model_task',",
"    model_id=MODEL_ID,",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#operations-on-models",
""
    ]
},
"AutoMLDeleteModelOperator":{
    "prefix": "AutoMLDeleteModelOperator",
    "body": [
        "AutoMLDeleteModelOperator(",
"    task_id='delete_model_task',",
"    model_id=model_id,",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#operations-on-models",
""
    ]
},
"AutoMLPredictOperator":{
    "prefix": "AutoMLPredictOperator",
    "body": [
        "AutoMLPredictOperator(",
"    task_id='predict_task',",
"    model_id=MODEL_ID,",
"    payload={},  # Add your own payload, the used model_id must be deployed",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#making-predictions",
""
    ]
},
"AutoMLBatchPredictOperator":{
    "prefix": "AutoMLBatchPredictOperator",
    "body": [
        "AutoMLBatchPredictOperator(",
"    task_id='batch_predict_task',",
"    model_id=MODEL_ID,",
"    input_config={},  # Add your config",
"    output_config={},  # Add your config",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#making-predictions",
""
    ]
},
"AutoMLListDatasetOperator":{
    "prefix": "AutoMLListDatasetOperator",
    "body": [
        "AutoMLListDatasetOperator(",
"    task_id='list_datasets_task',",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#listing-and-deleting-datasets",
""
    ]
},
"AutoMLDeleteDatasetOperator":{
    "prefix": "AutoMLDeleteDatasetOperator",
    "body": [
        "AutoMLDeleteDatasetOperator(",
"    task_id='delete_datasets_task',",
"    dataset_id='{{ task_instance.xcom_pull('list_datasets_task', key='dataset_id_list') | list }}',",
"    location=GCP_AUTOML_LOCATION,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/automl.html#listing-and-deleting-datasets",
""
    ]
},
"BigQueryCreateDataTransferOperator":{
    "prefix": "BigQueryCreateDataTransferOperator",
    "body": [
        "BigQueryCreateDataTransferOperator(",
"    transfer_config=TRANSFER_CONFIG,",
"    project_id=GCP_PROJECT_ID,",
"    task_id='gcp_bigquery_create_transfer'",
")",
"",
"transfer_config_id = (",
"    '{{ task_instance.xcom_pull('gcp_bigquery_create_transfer', key='transfer_config_id') }}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery_dts.html#creating-transfer-configuration",
""
    ]
},
"BigQueryDeleteDataTransferConfigOperator":{
    "prefix": "BigQueryDeleteDataTransferConfigOperator",
    "body": [
        "BigQueryDeleteDataTransferConfigOperator(",
"    transfer_config_id=transfer_config_id, task_id='gcp_bigquery_delete_transfer'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery_dts.html#deleting-transfer-configuration",
""
    ]
},
"BigQueryDataTransferServiceStartTransferRunsOperator":{
    "prefix": "BigQueryDataTransferServiceStartTransferRunsOperator",
    "body": [
        "BigQueryDataTransferServiceStartTransferRunsOperator(",
"    task_id='gcp_bigquery_start_transfer',",
"    transfer_config_id=transfer_config_id,",
"    requested_run_time={'seconds': int(time.time() + 60)}",
")run_id = '{{ task_instance.xcom_pull('gcp_bigquery_start_transfer', key='run_id') }}'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery_dts.html#manually-starting-transfer-runs",
""
    ]
},
"BigQueryDataTransferServiceTransferRunSensor":{
    "prefix": "BigQueryDataTransferServiceTransferRunSensor",
    "body": [
        "BigQueryDataTransferServiceTransferRunSensor(",
"    task_id='gcp_run_sensor',",
"    transfer_config_id=transfer_config_id,",
"    run_id=run_id,",
"    expected_statuses={'SUCCEEDED'}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigquery_dts.html#manually-starting-transfer-runs",
""
    ]
},
"BigtableCreateInstanceOperator":{
    "prefix": "BigtableCreateInstanceOperator",
    "body": [
        "BigtableCreateInstanceOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=CBT_INSTANCE_ID,",
"    main_cluster_id=CBT_CLUSTER_ID,",
"    main_cluster_zone=CBT_CLUSTER_ZONE,",
"    instance_display_name=CBT_INSTANCE_DISPLAY_NAME,",
"    instance_type=int(CBT_INSTANCE_TYPE),",
"    instance_labels=json.loads(CBT_INSTANCE_LABELS),",
"    cluster_nodes=None,",
"    cluster_storage_type=int(CBT_CLUSTER_STORAGE_TYPE),",
"    task_id='create_instance_task'",
")create_instance_task2 = BigtableCreateInstanceOperator(",
"    instance_id=CBT_INSTANCE_ID,",
"    main_cluster_id=CBT_CLUSTER_ID,",
"    main_cluster_zone=CBT_CLUSTER_ZONE,",
"    instance_display_name=CBT_INSTANCE_DISPLAY_NAME,",
"    instance_type=int(CBT_INSTANCE_TYPE),",
"    instance_labels=json.loads(CBT_INSTANCE_LABELS),",
"    cluster_nodes=int(CBT_CLUSTER_NODES),",
"    cluster_storage_type=int(CBT_CLUSTER_STORAGE_TYPE),",
"    task_id='create_instance_task2'",
")create_instance_task &gt;&gt; create_instance_task2'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigtable.html#using-the-operator",
""
    ]
},
"BigtableUpdateInstanceOperator":{
    "prefix": "BigtableUpdateInstanceOperator",
    "body": [
        "BigtableUpdateInstanceOperator(",
"    instance_id=CBT_INSTANCE_ID,",
"    instance_display_name=CBT_INSTANCE_DISPLAY_NAME_UPDATED,",
"    instance_type=int(CBT_INSTANCE_TYPE_PROD),",
"    instance_labels=json.loads(CBT_INSTANCE_LABELS_UPDATED),",
"    task_id='update_instance_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigtable.html#id1",
""
    ]
},
"BigtableDeleteInstanceOperator":{
    "prefix": "BigtableDeleteInstanceOperator",
    "body": [
        "BigtableDeleteInstanceOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=CBT_INSTANCE_ID,",
"    task_id='delete_instance_task'",
")delete_instance_task2 = BigtableDeleteInstanceOperator(",
"    instance_id=CBT_INSTANCE_ID,",
"    task_id='delete_instance_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigtable.html#id2",
""
    ]
},
"BigtableUpdateClusterOperator":{
    "prefix": "BigtableUpdateClusterOperator",
    "body": [
        "BigtableUpdateClusterOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=CBT_INSTANCE_ID,",
"    cluster_id=CBT_CLUSTER_ID,",
"    nodes=int(CBT_CLUSTER_NODES_UPDATED),",
"    task_id='update_cluster_task'",
")cluster_update_task2 = BigtableUpdateClusterOperator(",
"    instance_id=CBT_INSTANCE_ID,",
"    cluster_id=CBT_CLUSTER_ID,",
"    nodes=int(CBT_CLUSTER_NODES_UPDATED),",
"    task_id='update_cluster_task2'",
")cluster_update_task &gt;&gt; cluster_update_task2'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigtable.html#id3",
""
    ]
},
"BigtableCreateTableOperator":{
    "prefix": "BigtableCreateTableOperator",
    "body": [
        "BigtableCreateTableOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=CBT_INSTANCE_ID,",
"    table_id=CBT_TABLE_ID,",
"    task_id='create_table'",
")create_table_task2 = BigtableCreateTableOperator(",
"    instance_id=CBT_INSTANCE_ID,",
"    table_id=CBT_TABLE_ID,",
"    task_id='create_table_task2'",
")create_table_task &gt;&gt; create_table_task2'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigtable.html#id4",
""
    ]
},
"BigtableDeleteTableOperator":{
    "prefix": "BigtableDeleteTableOperator",
    "body": [
        "BigtableDeleteTableOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=CBT_INSTANCE_ID,",
"    table_id=CBT_TABLE_ID,",
"    task_id='delete_table_task'",
")delete_table_task2 = BigtableDeleteTableOperator(",
"    instance_id=CBT_INSTANCE_ID,",
"    table_id=CBT_TABLE_ID,",
"    task_id='delete_table_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigtable.html#id5",
""
    ]
},
"BigtableTableReplicationCompletedSensor":{
    "prefix": "BigtableTableReplicationCompletedSensor",
    "body": [
        "BigtableTableReplicationCompletedSensor(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=CBT_INSTANCE_ID,",
"    table_id=CBT_TABLE_ID,",
"    poke_interval=int(CBT_POKE_INTERVAL),",
"    timeout=180,",
"    task_id='wait_for_table_replication_task'",
")wait_for_table_replication_task2 = BigtableTableReplicationCompletedSensor(",
"    instance_id=CBT_INSTANCE_ID,",
"    table_id=CBT_TABLE_ID,",
"    poke_interval=int(CBT_POKE_INTERVAL),",
"    timeout=180,",
"    task_id='wait_for_table_replication_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/bigtable.html#id6",
""
    ]
},
"CloudBuildCreateBuildOperator":{
    "prefix": "CloudBuildCreateBuildOperator",
    "body": [
        "CloudBuildCreateBuildOperator(",
"        task_id='create_build_from_file',",
"        project_id=GCP_PROJECT_ID,",
"        body=str(CURRENT_FOLDER.joinpath('example_cloud_build.yaml')),",
"        params={'name': 'Airflow'},",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_build.html#build-configuration-overview",
""
    ]
},
"GCSBucketCreateAclEntryOperator":{
    "prefix": "GCSBucketCreateAclEntryOperator",
    "body": [
        "GCSBucketCreateAclEntryOperator(",
"    task_id='gcs-set-acl-permission',",
"    bucket=BUCKET_NAME,",
"    entity='user-{{ task_instance.xcom_pull('get-instance')['persistence_iam_identity']'",
"    '.split(':', 2)[1] }}',",
"    role='OWNER'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#configuration-of-bucket-permissions-for-import-export",
""
    ]
},
"CloudMemorystoreCreateInstanceOperator":{
    "prefix": "CloudMemorystoreCreateInstanceOperator",
    "body": [
        "CloudMemorystoreCreateInstanceOperator(",
"    task_id='create-instance',",
"    location='europe-north1',",
"    instance_id=MEMORYSTORE_REDIS_INSTANCE_NAME,",
"    instance=FIRST_INSTANCE,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#create-instance",
""
    ]
},
"CloudMemorystoreDeleteInstanceOperator":{
    "prefix": "CloudMemorystoreDeleteInstanceOperator",
    "body": [
        "CloudMemorystoreDeleteInstanceOperator(",
"    task_id='delete-instance',",
"    location='europe-north1',",
"    instance=MEMORYSTORE_REDIS_INSTANCE_NAME,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#delete-instance",
""
    ]
},
"CloudMemorystoreExportInstanceOperator":{
    "prefix": "CloudMemorystoreExportInstanceOperator",
    "body": [
        "CloudMemorystoreExportInstanceOperator(",
"    task_id='export-instance',",
"    location='europe-north1',",
"    instance=MEMORYSTORE_REDIS_INSTANCE_NAME,",
"    output_config={'gcs_destination': {'uri': EXPORT_GCS_URL}},",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#export-instance",
""
    ]
},
"CloudMemorystoreFailoverInstanceOperator":{
    "prefix": "CloudMemorystoreFailoverInstanceOperator",
    "body": [
        "CloudMemorystoreFailoverInstanceOperator(",
"    task_id='failover-instance',",
"    location='europe-north1',",
"    instance=MEMORYSTORE_REDIS_INSTANCE_NAME_2,",
"    data_protection_mode=FailoverInstanceRequest.DataProtectionMode.LIMITED_DATA_LOSS,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#failover-instance",
""
    ]
},
"CloudMemorystoreGetInstanceOperator":{
    "prefix": "CloudMemorystoreGetInstanceOperator",
    "body": [
        "CloudMemorystoreGetInstanceOperator(",
"    task_id='get-instance',",
"    location='europe-north1',",
"    instance=MEMORYSTORE_REDIS_INSTANCE_NAME,",
"    project_id=GCP_PROJECT_ID,",
"    do_xcom_push=True",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#get-instance",
""
    ]
},
"CloudMemorystoreImportOperator":{
    "prefix": "CloudMemorystoreImportOperator",
    "body": [
        "CloudMemorystoreImportOperator(",
"    task_id='import-instance',",
"    location='europe-north1',",
"    instance=MEMORYSTORE_REDIS_INSTANCE_NAME_2,",
"    input_config={'gcs_source': {'uri': EXPORT_GCS_URL}},",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#import-instance",
""
    ]
},
"CloudMemorystoreListInstancesOperator":{
    "prefix": "CloudMemorystoreListInstancesOperator",
    "body": [
        "CloudMemorystoreListInstancesOperator(",
"    task_id='list-instances', location='-', page_size=100, project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#list-instances",
""
    ]
},
"CloudMemorystoreUpdateInstanceOperator":{
    "prefix": "CloudMemorystoreUpdateInstanceOperator",
    "body": [
        "CloudMemorystoreUpdateInstanceOperator(",
"    task_id='update-instance',",
"    location='europe-north1',",
"    instance_id=MEMORYSTORE_REDIS_INSTANCE_NAME,",
"    project_id=GCP_PROJECT_ID,",
"    update_mask={'paths': ['memory_size_gb']},",
"    instance={'memory_size_gb': 2}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#update-instance",
""
    ]
},
"CloudMemorystoreScaleInstanceOperator":{
    "prefix": "CloudMemorystoreScaleInstanceOperator",
    "body": [
        "CloudMemorystoreScaleInstanceOperator(",
"    task_id='scale-instance',",
"    location='europe-north1',",
"    instance_id=MEMORYSTORE_REDIS_INSTANCE_NAME_3,",
"    project_id=GCP_PROJECT_ID,",
"    memory_size_gb=3",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore.html#scale-instance",
""
    ]
},
"CloudMemorystoreMemcachedCreateInstanceOperator":{
    "prefix": "CloudMemorystoreMemcachedCreateInstanceOperator",
    "body": [
        "CloudMemorystoreMemcachedCreateInstanceOperator(",
"    task_id='create-instance',",
"    location='europe-north1',",
"    instance_id=MEMORYSTORE_MEMCACHED_INSTANCE_NAME,",
"    instance=MEMCACHED_INSTANCE,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore_memcached.html#create-instance",
""
    ]
},
"CloudMemorystoreMemcachedDeleteInstanceOperator":{
    "prefix": "CloudMemorystoreMemcachedDeleteInstanceOperator",
    "body": [
        "CloudMemorystoreMemcachedDeleteInstanceOperator(",
"    task_id='delete-instance',",
"    location='europe-north1',",
"    instance=MEMORYSTORE_MEMCACHED_INSTANCE_NAME,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore_memcached.html#delete-instance",
""
    ]
},
"CloudMemorystoreMemcachedGetInstanceOperator":{
    "prefix": "CloudMemorystoreMemcachedGetInstanceOperator",
    "body": [
        "CloudMemorystoreMemcachedGetInstanceOperator(",
"    task_id='get-instance',",
"    location='europe-north1',",
"    instance=MEMORYSTORE_MEMCACHED_INSTANCE_NAME,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore_memcached.html#get-instance",
""
    ]
},
"CloudMemorystoreMemcachedListInstancesOperator":{
    "prefix": "CloudMemorystoreMemcachedListInstancesOperator",
    "body": [
        "CloudMemorystoreMemcachedListInstancesOperator(",
"    task_id='list-instances', location='-', project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore_memcached.html#list-instances",
""
    ]
},
"CloudMemorystoreMemcachedUpdateInstanceOperator":{
    "prefix": "CloudMemorystoreMemcachedUpdateInstanceOperator",
    "body": [
        "CloudMemorystoreMemcachedUpdateInstanceOperator(",
"    task_id='update-instance',",
"    location='europe-north1',",
"    instance_id=MEMORYSTORE_MEMCACHED_INSTANCE_NAME,",
"    project_id=GCP_PROJECT_ID,",
"    update_mask=cloud_memcache.field_mask.FieldMask(paths=['node_count']),",
"    instance={'node_count': 2}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore_memcached.html#update-instance",
""
    ]
},
"CloudMemorystoreMemcachedUpdateParametersOperator":{
    "prefix": "CloudMemorystoreMemcachedUpdateParametersOperator",
    "body": [
        "CloudMemorystoreMemcachedUpdateParametersOperator(",
"    task_id='update-parameters',",
"    location='europe-north1',",
"    instance_id=MEMORYSTORE_MEMCACHED_INSTANCE_NAME,",
"    project_id=GCP_PROJECT_ID,",
"    update_mask={'paths': ['params']},",
"    parameters={'params': {'protocol': 'ascii', 'hash_algorithm': 'jenkins'}}",
")",
"",
"apply_memcached_parameters = CloudMemorystoreMemcachedApplyParametersOperator(",
"    task_id='apply-parameters',",
"    location='europe-north1',",
"    instance_id=MEMORYSTORE_MEMCACHED_INSTANCE_NAME,",
"    project_id=GCP_PROJECT_ID,",
"    node_ids=['node-a-1'],",
"    apply_all=False",
")",
"",
"# update_parameters &gt;&gt; apply_parameters'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_memorystore_memcached.html#update-and-apply-parameters-to-an-instance",
""
    ]
},
"CloudSQLCreateInstanceDatabaseOperator":{
    "prefix": "CloudSQLCreateInstanceDatabaseOperator",
    "body": [
        "CloudSQLCreateInstanceDatabaseOperator(",
"    project_id=GCP_PROJECT_ID, body=db_create_body, instance=INSTANCE_NAME, task_id='sql_db_create_task'",
")sql_db_create_task2 = CloudSQLCreateInstanceDatabaseOperator(",
"    body=db_create_body, instance=INSTANCE_NAME, task_id='sql_db_create_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#using-the-operator",
""
    ]
},
"CloudSQLDeleteInstanceDatabaseOperator":{
    "prefix": "CloudSQLDeleteInstanceDatabaseOperator",
    "body": [
        "CloudSQLDeleteInstanceDatabaseOperator(",
"    project_id=GCP_PROJECT_ID, instance=INSTANCE_NAME, database=DB_NAME, task_id='sql_db_delete_task'",
")sql_db_delete_task2 = CloudSQLDeleteInstanceDatabaseOperator(",
"    instance=INSTANCE_NAME, database=DB_NAME, task_id='sql_db_delete_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#id1",
""
    ]
},
"CloudSQLPatchInstanceDatabaseOperator":{
    "prefix": "CloudSQLPatchInstanceDatabaseOperator",
    "body": [
        "CloudSQLPatchInstanceDatabaseOperator(",
"    project_id=GCP_PROJECT_ID,",
"    body=db_patch_body,",
"    instance=INSTANCE_NAME,",
"    database=DB_NAME,",
"    task_id='sql_db_patch_task'",
")sql_db_patch_task2 = CloudSQLPatchInstanceDatabaseOperator(",
"    body=db_patch_body, instance=INSTANCE_NAME, database=DB_NAME, task_id='sql_db_patch_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#id4",
""
    ]
},
"CloudSQLDeleteInstanceOperator":{
    "prefix": "CloudSQLDeleteInstanceOperator",
    "body": [
        "CloudSQLDeleteInstanceOperator(",
"    project_id=GCP_PROJECT_ID, instance=INSTANCE_NAME, task_id='sql_instance_delete_task'",
")sql_instance_delete_task2 = CloudSQLDeleteInstanceOperator(",
"    instance=INSTANCE_NAME2, task_id='sql_instance_delete_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#id7",
""
    ]
},
"CloudSQLExportInstanceOperator":{
    "prefix": "CloudSQLExportInstanceOperator",
    "body": [
        "CloudSQLExportInstanceOperator(",
"    project_id=GCP_PROJECT_ID, body=export_body, instance=INSTANCE_NAME, task_id='sql_export_task'",
")sql_export_task2 = CloudSQLExportInstanceOperator(",
"    body=export_body, instance=INSTANCE_NAME, task_id='sql_export_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#id10",
""
    ]
},
"CloudSQLImportInstanceOperator":{
    "prefix": "CloudSQLImportInstanceOperator",
    "body": [
        "CloudSQLImportInstanceOperator(",
"    project_id=GCP_PROJECT_ID, body=import_body, instance=INSTANCE_NAME2, task_id='sql_import_task'",
")sql_import_task2 = CloudSQLImportInstanceOperator(",
"    body=import_body, instance=INSTANCE_NAME2, task_id='sql_import_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#id14",
""
    ]
},
"GCSObjectCreateAclEntryOperator":{
    "prefix": "GCSObjectCreateAclEntryOperator",
    "body": [
        "GCSObjectCreateAclEntryOperator(",
"    entity='user-{{ task_instance.xcom_pull('",
"    'sql_instance_create_task2', key='service_account_email')",
"    ' }}',",
"    role='READER',",
"    bucket=import_url_split[1],  # netloc (bucket)",
"    object_name=import_url_split[2][1:],  # path (strip first '/')",
"    task_id='sql_gcp_add_object_permission_task'",
")",
"",
"# For import to work we also need to add the Cloud SQL instance's Service Account'# write access to the whole bucket!.'sql_gcp_add_bucket_permission_2_task = GCSBucketCreateAclEntryOperator(",
"    entity='user-{{ task_instance.xcom_pull('",
"    'sql_instance_create_task2', key='service_account_email') '",
"    '}}',",
"    role='WRITER',",
"    bucket=import_url_split[1],  # netloc",
"    task_id='sql_gcp_add_bucket_permission_2_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#id17",
""
    ]
},
"CloudSQLCreateInstanceOperator":{
    "prefix": "CloudSQLCreateInstanceOperator",
    "body": [
        "CloudSQLCreateInstanceOperator(",
"    project_id=GCP_PROJECT_ID, body=body, instance=INSTANCE_NAME, task_id='sql_instance_create_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#id19",
""
    ]
},
"CloudSQLInstancePatchOperator":{
    "prefix": "CloudSQLInstancePatchOperator",
    "body": [
        "CloudSQLInstancePatchOperator(",
"    project_id=GCP_PROJECT_ID, body=patch_body, instance=INSTANCE_NAME, task_id='sql_instance_patch_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_sql.html#id23",
""
    ]
},
"CloudDataTransferServiceCreateJobOperator":{
    "prefix": "CloudDataTransferServiceCreateJobOperator",
    "body": [
        "CloudDataTransferServiceCreateJobOperator(",
"    task_id='create_transfer_job_from_aws', body=aws_to_gcs_transfer_body",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#using-the-operator",
""
    ]
},
"CloudDataTransferServiceDeleteJobOperator":{
    "prefix": "CloudDataTransferServiceDeleteJobOperator",
    "body": [
        "CloudDataTransferServiceDeleteJobOperator(",
"    task_id='delete_transfer_from_aws_job',",
"    job_name='{{task_instance.xcom_pull('create_transfer_job_from_aws')['name']}}',",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#id2",
""
    ]
},
"CloudDataTransferServiceUpdateJobOperator":{
    "prefix": "CloudDataTransferServiceUpdateJobOperator",
    "body": [
        "CloudDataTransferServiceUpdateJobOperator(",
"    task_id='update_transfer',",
"    job_name='{{task_instance.xcom_pull('create_transfer')['name']}}',",
"    body=update_body",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#id5",
""
    ]
},
"CloudDataTransferServiceCancelOperationOperator":{
    "prefix": "CloudDataTransferServiceCancelOperationOperator",
    "body": [
        "CloudDataTransferServiceCancelOperationOperator(",
"    task_id='cancel_operation',",
"    operation_name='{{task_instance.xcom_pull('",
"    'wait_for_second_operation_to_start', key='sensed_operations')[0]['name']}}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#id8",
""
    ]
},
"CloudDataTransferServiceGetOperationOperator":{
    "prefix": "CloudDataTransferServiceGetOperationOperator",
    "body": [
        "CloudDataTransferServiceGetOperationOperator(",
"    task_id='get_operation', operation_name='{{task_instance.xcom_pull('list_operations')[0]['name']}}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#id11",
""
    ]
},
"CloudDataTransferServiceListOperationsOperator":{
    "prefix": "CloudDataTransferServiceListOperationsOperator",
    "body": [
        "CloudDataTransferServiceListOperationsOperator(",
"    task_id='list_operations',",
"    request_filter={",
"        FILTER_PROJECT_ID: GCP_PROJECT_ID,",
"        FILTER_JOB_NAMES: ['{{task_instance.xcom_pull('create_transfer_job_from_aws')['name']}}'],",
"    }",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#id14",
""
    ]
},
"CloudDataTransferServicePauseOperationOperator":{
    "prefix": "CloudDataTransferServicePauseOperationOperator",
    "body": [
        "CloudDataTransferServicePauseOperationOperator(",
"    task_id='pause_operation',",
"    operation_name='{{task_instance.xcom_pull('wait_for_operation_to_start', '",
"    'key='sensed_operations')[0]['name']}}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#id17",
""
    ]
},
"CloudDataTransferServiceResumeOperationOperator":{
    "prefix": "CloudDataTransferServiceResumeOperationOperator",
    "body": [
        "CloudDataTransferServiceResumeOperationOperator(",
"    task_id='resume_operation', operation_name='{{task_instance.xcom_pull('get_operation')['name']}}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#id20",
""
    ]
},
"CloudDataTransferServiceJobStatusSensor":{
    "prefix": "CloudDataTransferServiceJobStatusSensor",
    "body": [
        "CloudDataTransferServiceJobStatusSensor(",
"    task_id='wait_for_operation_to_end',",
"    job_name='{{task_instance.xcom_pull('create_transfer_job_from_aws')['name']}}',",
"    project_id=GCP_PROJECT_ID,",
"    expected_statuses={GcpTransferOperationStatus.SUCCESS},",
"    poke_interval=WAIT_FOR_OPERATION_POKE_INTERVAL",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/cloud_storage_transfer_service.html#id23",
""
    ]
},
"ComputeEngineStartInstanceOperator":{
    "prefix": "ComputeEngineStartInstanceOperator",
    "body": [
        "ComputeEngineStartInstanceOperator(",
"    project_id=GCP_PROJECT_ID, zone=GCE_ZONE, resource_id=GCE_INSTANCE, task_id='gcp_compute_start_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/compute.html#using-the-operator",
""
    ]
},
"ComputeEngineStopInstanceOperator":{
    "prefix": "ComputeEngineStopInstanceOperator",
    "body": [
        "ComputeEngineStopInstanceOperator(",
"    project_id=GCP_PROJECT_ID, zone=GCE_ZONE, resource_id=GCE_INSTANCE, task_id='gcp_compute_stop_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/compute.html#id1",
""
    ]
},
"ComputeEngineSetMachineTypeOperator":{
    "prefix": "ComputeEngineSetMachineTypeOperator",
    "body": [
        "ComputeEngineSetMachineTypeOperator(",
"    project_id=GCP_PROJECT_ID,",
"    zone=GCE_ZONE,",
"    resource_id=GCE_INSTANCE,",
"    body={'machineType': f'zones/{GCE_ZONE}/machineTypes/{GCE_SHORT_MACHINE_TYPE_NAME}'},",
"    task_id='gcp_compute_set_machine_type'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/compute.html#id4",
""
    ]
},
"ComputeEngineCopyInstanceTemplateOperator":{
    "prefix": "ComputeEngineCopyInstanceTemplateOperator",
    "body": [
        "ComputeEngineCopyInstanceTemplateOperator(",
"    project_id=GCP_PROJECT_ID,",
"    resource_id=GCE_TEMPLATE_NAME,",
"    body_patch=GCE_INSTANCE_TEMPLATE_BODY_UPDATE,",
"    task_id='gcp_compute_igm_copy_template_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/compute.html#id7",
""
    ]
},
"ComputeEngineInstanceGroupUpdateManagerTemplateOperator":{
    "prefix": "ComputeEngineInstanceGroupUpdateManagerTemplateOperator",
    "body": [
        "ComputeEngineInstanceGroupUpdateManagerTemplateOperator(",
"    project_id=GCP_PROJECT_ID,",
"    resource_id=GCE_INSTANCE_GROUP_MANAGER_NAME,",
"    zone=GCE_ZONE,",
"    source_template=SOURCE_TEMPLATE_URL,",
"    destination_template=DESTINATION_TEMPLATE_URL,",
"    update_policy=UPDATE_POLICY,",
"    task_id='gcp_compute_igm_group_manager_update_template'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/compute.html#id11",
""
    ]
},
"SSHOperator":{
    "prefix": "SSHOperator",
    "body": [
        "SSHOperator(",
"    task_id='os_login_without_iap_tunnel',",
"    ssh_hook=ComputeEngineSSHHook(",
"        instance_name=GCE_INSTANCE,",
"        zone=GCE_ZONE,",
"        project_id=GCP_PROJECT_ID,",
"        use_oslogin=True,",
"        use_iap_tunnel=False,",
"    ),",
"    command='echo os_login_without_iap_tunnel'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/compute_ssh.html#computeengineremoteinstancesshoperator",
""
    ]
},
"CloudDLPCreateStoredInfoTypeOperator":{
    "prefix": "CloudDLPCreateStoredInfoTypeOperator",
    "body": [
        "CloudDLPCreateStoredInfoTypeOperator(",
"    project_id=GCP_PROJECT,",
"    config=CUSTOM_INFO_TYPES,",
"    stored_info_type_id=CUSTOM_INFO_TYPE_ID,",
"    task_id='create_info_type'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#create-stored-info-type",
""
    ]
},
"CloudDLPUpdateStoredInfoTypeOperator":{
    "prefix": "CloudDLPUpdateStoredInfoTypeOperator",
    "body": [
        "CloudDLPUpdateStoredInfoTypeOperator(",
"    project_id=GCP_PROJECT,",
"    stored_info_type_id=CUSTOM_INFO_TYPE_ID,",
"    config=UPDATE_CUSTOM_INFO_TYPE,",
"    task_id='update_info_type'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#update-stored-info-type",
""
    ]
},
"CloudDLPDeleteStoredInfoTypeOperator":{
    "prefix": "CloudDLPDeleteStoredInfoTypeOperator",
    "body": [
        "CloudDLPDeleteStoredInfoTypeOperator(",
"    project_id=GCP_PROJECT,",
"    stored_info_type_id=CUSTOM_INFO_TYPE_ID,",
"    task_id='delete_info_type'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#deleting-stored-info-type",
""
    ]
},
"CloudDLPCreateInspectTemplateOperator":{
    "prefix": "CloudDLPCreateInspectTemplateOperator",
    "body": [
        "CloudDLPCreateInspectTemplateOperator(",
"    project_id=GCP_PROJECT,",
"    inspect_template=INSPECT_TEMPLATE,",
"    template_id=TEMPLATE_ID,",
"    task_id='create_template',",
"    do_xcom_push=True",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#creating-template",
""
    ]
},
"CloudDLPInspectContentOperator":{
    "prefix": "CloudDLPInspectContentOperator",
    "body": [
        "CloudDLPInspectContentOperator(",
"    task_id='inspect_content',",
"    project_id=GCP_PROJECT,",
"    item=ITEM,",
"    inspect_template_name='{{ task_instance.xcom_pull('create_template', key='return_value')['name'] }}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#using-template",
""
    ]
},
"CloudDLPDeleteInspectTemplateOperator":{
    "prefix": "CloudDLPDeleteInspectTemplateOperator",
    "body": [
        "CloudDLPDeleteInspectTemplateOperator(",
"    task_id='delete_template',",
"    template_id=TEMPLATE_ID,",
"    project_id=GCP_PROJECT",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#deleting-template",
""
    ]
},
"CloudDLPCreateJobTriggerOperator":{
    "prefix": "CloudDLPCreateJobTriggerOperator",
    "body": [
        "CloudDLPCreateJobTriggerOperator(",
"    project_id=GCP_PROJECT,",
"    job_trigger=JOB_TRIGGER,",
"    trigger_id=TRIGGER_ID,",
"    task_id='create_trigger'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#creating-job-trigger",
""
    ]
},
"CloudDLPUpdateJobTriggerOperator":{
    "prefix": "CloudDLPUpdateJobTriggerOperator",
    "body": [
        "CloudDLPUpdateJobTriggerOperator(",
"    project_id=GCP_PROJECT,",
"    job_trigger_id=TRIGGER_ID,",
"    job_trigger=JOB_TRIGGER,",
"    task_id='update_info_type'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#updating-job-trigger",
""
    ]
},
"CloudDLPDeleteJobTriggerOperator":{
    "prefix": "CloudDLPDeleteJobTriggerOperator",
    "body": [
        "CloudDLPDeleteJobTriggerOperator(",
"    project_id=GCP_PROJECT, job_trigger_id=TRIGGER_ID, task_id='delete_info_type'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#deleting-job-trigger",
""
    ]
},
"CloudDLPDeidentifyContentOperator":{
    "prefix": "CloudDLPDeidentifyContentOperator",
    "body": [
        "CloudDLPDeidentifyContentOperator(",
"    project_id=GCP_PROJECT,",
"    item=ITEM,",
"    deidentify_config=DEIDENTIFY_CONFIG,",
"    inspect_config=INSPECT_CONFIG,",
"    task_id='deidentify_content'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/data_loss_prevention.html#de-identify-content",
""
    ]
},
"CloudDataCatalogGetEntryOperator":{
    "prefix": "CloudDataCatalogGetEntryOperator",
    "body": [
        "CloudDataCatalogGetEntryOperator(",
"    task_id='get_entry', location=LOCATION, entry_group=ENTRY_GROUP_ID, entry=ENTRY_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#getting-an-entry",
""
    ]
},
"CloudDataCatalogCreateEntryOperator":{
    "prefix": "CloudDataCatalogCreateEntryOperator",
    "body": [
        "CloudDataCatalogCreateEntryOperator(",
"    task_id='create_entry_gcs',",
"    location=LOCATION,",
"    entry_group=ENTRY_GROUP_ID,",
"    entry_id=ENTRY_ID,",
"    entry={",
"        'display_name': 'Wizard',",
"        'type_': 'FILESET',",
"        'gcs_fileset_spec': {'file_patterns': ['gs://test-datacatalog/**']},",
"    }",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#creating-an-entry",
""
    ]
},
"CloudDataCatalogUpdateEntryOperator":{
    "prefix": "CloudDataCatalogUpdateEntryOperator",
    "body": [
        "CloudDataCatalogUpdateEntryOperator(",
"    task_id='update_entry',",
"    entry={'display_name': 'New Wizard'},",
"    update_mask={'paths': ['display_name']},",
"    location=LOCATION,",
"    entry_group=ENTRY_GROUP_ID,",
"    entry_id=ENTRY_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#updating-an-entry",
""
    ]
},
"CloudDataCatalogDeleteEntryOperator":{
    "prefix": "CloudDataCatalogDeleteEntryOperator",
    "body": [
        "CloudDataCatalogDeleteEntryOperator(",
"    task_id='delete_entry', location=LOCATION, entry_group=ENTRY_GROUP_ID, entry=ENTRY_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#deleting-a-entry",
""
    ]
},
"CloudDataCatalogCreateEntryGroupOperator":{
    "prefix": "CloudDataCatalogCreateEntryGroupOperator",
    "body": [
        "CloudDataCatalogCreateEntryGroupOperator(",
"    task_id='create_entry_group',",
"    location=LOCATION,",
"    entry_group_id=ENTRY_GROUP_ID,",
"    entry_group={'display_name': 'analytics data - jan 2011'}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#creating-an-entry-group",
""
    ]
},
"CloudDataCatalogGetEntryGroupOperator":{
    "prefix": "CloudDataCatalogGetEntryGroupOperator",
    "body": [
        "CloudDataCatalogGetEntryGroupOperator(",
"    task_id='get_entry_group',",
"    location=LOCATION,",
"    entry_group=ENTRY_GROUP_ID,",
"    read_mask={'paths': ['name', 'display_name']}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#getting-an-entry-group",
""
    ]
},
"CloudDataCatalogDeleteEntryGroupOperator":{
    "prefix": "CloudDataCatalogDeleteEntryGroupOperator",
    "body": [
        "CloudDataCatalogDeleteEntryGroupOperator(",
"    task_id='delete_entry_group', location=LOCATION, entry_group=ENTRY_GROUP_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#deleting-an-entry-group",
""
    ]
},
"CloudDataCatalogCreateTagTemplateOperator":{
    "prefix": "CloudDataCatalogCreateTagTemplateOperator",
    "body": [
        "CloudDataCatalogCreateTagTemplateOperator(",
"    task_id='create_tag_template',",
"    location=LOCATION,",
"    tag_template_id=TEMPLATE_ID,",
"    tag_template={",
"        'display_name': 'Awesome Tag Template',",
"        'fields': {",
"            FIELD_NAME_1: TagTemplateField(",
"                display_name='first-field', type_=dict(primitive_type='STRING')",
"            )",
"        },",
"    }",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#creating-a-tag-templates",
""
    ]
},
"CloudDataCatalogDeleteTagTemplateOperator":{
    "prefix": "CloudDataCatalogDeleteTagTemplateOperator",
    "body": [
        "CloudDataCatalogDeleteTagTemplateOperator(",
"    task_id='delete_tag_template', location=LOCATION, tag_template=TEMPLATE_ID, force=True",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#deleting-a-tag-template",
""
    ]
},
"CloudDataCatalogGetTagTemplateOperator":{
    "prefix": "CloudDataCatalogGetTagTemplateOperator",
    "body": [
        "CloudDataCatalogGetTagTemplateOperator(",
"    task_id='get_tag_template', location=LOCATION, tag_template=TEMPLATE_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#getting-a-tag-template",
""
    ]
},
"CloudDataCatalogUpdateTagTemplateOperator":{
    "prefix": "CloudDataCatalogUpdateTagTemplateOperator",
    "body": [
        "CloudDataCatalogUpdateTagTemplateOperator(",
"    task_id='update_tag_template',",
"    tag_template={'display_name': 'Awesome Tag Template'},",
"    update_mask={'paths': ['display_name']},",
"    location=LOCATION,",
"    tag_template_id=TEMPLATE_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#updating-a-tag-template",
""
    ]
},
"CloudDataCatalogCreateTagOperator":{
    "prefix": "CloudDataCatalogCreateTagOperator",
    "body": [
        "CloudDataCatalogCreateTagOperator(",
"    task_id='create_tag',",
"    location=LOCATION,",
"    entry_group=ENTRY_GROUP_ID,",
"    entry=ENTRY_ID,",
"    template_id=TEMPLATE_ID,",
"    tag={'fields': {FIELD_NAME_1: TagField(string_value='example-value-string')}}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#creating-a-tag-on-an-entry",
""
    ]
},
"CloudDataCatalogListTagsOperator":{
    "prefix": "CloudDataCatalogListTagsOperator",
    "body": [
        "CloudDataCatalogListTagsOperator(",
"    task_id='list_tags', location=LOCATION, entry_group=ENTRY_GROUP_ID, entry=ENTRY_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#listing-an-tags-on-an-entry",
""
    ]
},
"CloudDataCatalogCreateTagTemplateFieldOperator":{
    "prefix": "CloudDataCatalogCreateTagTemplateFieldOperator",
    "body": [
        "CloudDataCatalogCreateTagTemplateFieldOperator(",
"    task_id='create_tag_template_field',",
"    location=LOCATION,",
"    tag_template=TEMPLATE_ID,",
"    tag_template_field_id=FIELD_NAME_2,",
"    tag_template_field=TagTemplateField(",
"        display_name='second-field', type_=FieldType(primitive_type='STRING')",
"    )",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#creating-a-field",
""
    ]
},
"CloudDataCatalogRenameTagTemplateFieldOperator":{
    "prefix": "CloudDataCatalogRenameTagTemplateFieldOperator",
    "body": [
        "CloudDataCatalogRenameTagTemplateFieldOperator(",
"    task_id='rename_tag_template_field',",
"    location=LOCATION,",
"    tag_template=TEMPLATE_ID,",
"    field=FIELD_NAME_1,",
"    new_tag_template_field_id=FIELD_NAME_3",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#renaming-a-field",
""
    ]
},
"CloudDataCatalogUpdateTagTemplateFieldOperator":{
    "prefix": "CloudDataCatalogUpdateTagTemplateFieldOperator",
    "body": [
        "CloudDataCatalogUpdateTagTemplateFieldOperator(",
"    task_id='update_tag_template_field',",
"    tag_template_field={'display_name': 'Updated template field'},",
"    update_mask={'paths': ['display_name']},",
"    location=LOCATION,",
"    tag_template=TEMPLATE_ID,",
"    tag_template_field_id=FIELD_NAME_1",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#updating-a-field",
""
    ]
},
"CloudDataCatalogDeleteTagTemplateFieldOperator":{
    "prefix": "CloudDataCatalogDeleteTagTemplateFieldOperator",
    "body": [
        "CloudDataCatalogDeleteTagTemplateFieldOperator(",
"    task_id='delete_tag_template_field',",
"    location=LOCATION,",
"    tag_template=TEMPLATE_ID,",
"    field=FIELD_NAME_2,",
"    force=True",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#deleting-a-field",
""
    ]
},
"CloudDataCatalogSearchCatalogOperator":{
    "prefix": "CloudDataCatalogSearchCatalogOperator",
    "body": [
        "CloudDataCatalogSearchCatalogOperator(",
"    task_id='search_catalog', scope={'include_project_ids': [PROJECT_ID]}, query=f'projectid:{PROJECT_ID}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datacatalog.html#search-resources",
""
    ]
},
"DataflowCreateJavaJobOperator":{
    "prefix": "DataflowCreateJavaJobOperator",
    "body": [
        "DataflowCreateJavaJobOperator(",
"    task_id='start-java-job',",
"    jar=GCS_JAR,",
"    job_name='{{task.task_id}}',",
"    options={",
"        'output': GCS_OUTPUT,",
"    },",
"    poll_sleep=10,",
"    job_class='org.apache.beam.examples.WordCount',",
"    check_if_running=CheckJobRunning.IgnoreJob,",
"    location='europe-west3'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataflow.html#java-sdk-pipelines",
""
    ]
},
"DataflowCreatePythonJobOperator":{
    "prefix": "DataflowCreatePythonJobOperator",
    "body": [
        "DataflowCreatePythonJobOperator(",
"    task_id='start-python-job',",
"    py_file=GCS_PYTHON,",
"    py_options=[],",
"    job_name='{{task.task_id}}',",
"    options={",
"        'output': GCS_OUTPUT,",
"    },",
"    py_requirements=['apache-beam[gcp]==2.21.0'],",
"    py_interpreter='python3',",
"    py_system_site_packages=False,",
"    location='europe-west3'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataflow.html#python-sdk-pipelines",
""
    ]
},
"DataflowTemplatedJobStartOperator":{
    "prefix": "DataflowTemplatedJobStartOperator",
    "body": [
        "DataflowTemplatedJobStartOperator(",
"    task_id='start-template-job',",
"    template='gs://dataflow-templates/latest/Word_Count',",
"    parameters={'inputFile': 'gs://dataflow-samples/shakespeare/kinglear.txt', 'output': GCS_OUTPUT},",
"    location='europe-west3'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataflow.html#templated-jobs",
""
    ]
},
"DataflowStartFlexTemplateOperator":{
    "prefix": "DataflowStartFlexTemplateOperator",
    "body": [
        "DataflowStartFlexTemplateOperator(",
"    task_id='start_flex_template_streaming_beam_sql',",
"    body={",
"        'launchParameter': {",
"            'containerSpecGcsPath': GCS_FLEX_TEMPLATE_TEMPLATE_PATH,",
"            'jobName': DATAFLOW_FLEX_TEMPLATE_JOB_NAME,",
"            'parameters': {",
"                'inputSubscription': PUBSUB_FLEX_TEMPLATE_SUBSCRIPTION,",
"                'outputTable': f'{GCP_PROJECT_ID}:{BQ_FLEX_TEMPLATE_DATASET}.streaming_beam_sql',",
"            },",
"        }",
"    },",
"    do_xcom_push=True,",
"    location=BQ_FLEX_TEMPLATE_LOCATION",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataflow.html#templated-jobs",
""
    ]
},
"DataflowStartSqlJobOperator":{
    "prefix": "DataflowStartSqlJobOperator",
    "body": [
        "DataflowStartSqlJobOperator(",
"    task_id='start_sql_query',",
"    job_name=DATAFLOW_SQL_JOB_NAME,",
"    query=f''",
"        SELECT",
"            sales_region as sales_region,",
"            count(state_id) as count_state",
"        FROM",
"            bigquery.table.`{GCP_PROJECT_ID}`.`{BQ_SQL_DATASET}`.`{BQ_SQL_TABLE_INPUT}`",
"        WHERE state_id &gt;= @state_id_min",
"        GROUP BY sales_region;",
"    '',",
"    options={",
"        'bigquery-project': GCP_PROJECT_ID,",
"        'bigquery-dataset': BQ_SQL_DATASET,",
"        'bigquery-table': BQ_SQL_TABLE_OUTPUT,",
"        'bigquery-write-disposition': 'write-truncate',",
"        'parameter': 'state_id_min:INT64:2',",
"    },",
"    location=DATAFLOW_SQL_LOCATION,",
"    do_xcom_push=True",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataflow.html#dataflow-sql",
""
    ]
},
"DataflowJobStatusSensor":{
    "prefix": "DataflowJobStatusSensor",
    "body": [
        "DataflowJobStatusSensor(",
"    task_id='wait-for-python-job-async-done',",
"    job_id='{{task_instance.xcom_pull('start-python-job-async')['job_id']}}',",
"    expected_statuses={DataflowJobStatus.JOB_STATE_DONE},",
"    location='europe-west3'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataflow.html#sensors",
""
    ]
},
"DataflowJobMessagesSensor":{
    "prefix": "DataflowJobMessagesSensor",
    "body": [
        "DataflowJobMessagesSensor(",
"    task_id='wait-for-python-job-async-message',",
"    job_id='{{task_instance.xcom_pull('start-python-job-async')['job_id']}}',",
"    location='europe-west3',",
"    callback=check_message",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataflow.html#sensors",
""
    ]
},
"DataflowJobAutoScalingEventsSensor":{
    "prefix": "DataflowJobAutoScalingEventsSensor",
    "body": [
        "DataflowJobAutoScalingEventsSensor(",
"    task_id='wait-for-python-job-async-autoscaling-event',",
"    job_id='{{task_instance.xcom_pull('start-python-job-async')['job_id']}}',",
"    location='europe-west3',",
"    callback=check_autoscaling_event",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataflow.html#sensors",
""
    ]
},
"DataprepRunJobGroupOperator":{
    "prefix": "DataprepRunJobGroupOperator",
    "body": [
        "DataprepRunJobGroupOperator(task_id='run_job_group', body_request=DATA)",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataprep.html#run-job-group",
""
    ]
},
"DataprepGetJobsForJobGroupOperator":{
    "prefix": "DataprepGetJobsForJobGroupOperator",
    "body": [
        "DataprepGetJobsForJobGroupOperator(",
"    task_id='get_jobs_for_job_group', job_id=DATAPREP_JOB_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataprep.html#get-jobs-for-job-group",
""
    ]
},
"DataprepGetJobGroupOperator":{
    "prefix": "DataprepGetJobGroupOperator",
    "body": [
        "DataprepGetJobGroupOperator(",
"    task_id='get_job_group',",
"    job_group_id=DATAPREP_JOB_ID,",
"    embed=',",
"    include_deleted=False",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataprep.html#get-job-group",
""
    ]
},
"DataprocCreateClusterOperator":{
    "prefix": "DataprocCreateClusterOperator",
    "body": [
        "DataprocCreateClusterOperator(",
"    task_id='create_cluster',",
"    project_id=PROJECT_ID,",
"    cluster_config=CLUSTER_CONFIG,",
"    region=REGION,",
"    cluster_name=CLUSTER_NAME",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataproc.html#create-a-cluster",
""
    ]
},
"DataprocUpdateClusterOperator":{
    "prefix": "DataprocUpdateClusterOperator",
    "body": [
        "DataprocUpdateClusterOperator(",
"    task_id='scale_cluster',",
"    cluster_name=CLUSTER_NAME,",
"    cluster=CLUSTER_UPDATE,",
"    update_mask=UPDATE_MASK,",
"    graceful_decommission_timeout=TIMEOUT,",
"    project_id=PROJECT_ID,",
"    location=REGION",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataproc.html#update-a-cluster",
""
    ]
},
"DataprocDeleteClusterOperator":{
    "prefix": "DataprocDeleteClusterOperator",
    "body": [
        "DataprocDeleteClusterOperator(",
"    task_id='delete_cluster', project_id=PROJECT_ID, cluster_name=CLUSTER_NAME, region=REGION",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataproc.html#deleting-a-cluster",
""
    ]
},
"DataprocSubmitJobOperator":{
    "prefix": "DataprocSubmitJobOperator",
    "body": [
        "DataprocSubmitJobOperator(",
"    task_id='pyspark_task', job=PYSPARK_JOB, location=REGION, project_id=PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataproc.html#submit-a-job-to-a-cluster",
""
    ]
},
"DataprocCreateWorkflowTemplateOperator":{
    "prefix": "DataprocCreateWorkflowTemplateOperator",
    "body": [
        "DataprocCreateWorkflowTemplateOperator(",
"    task_id='create_workflow_template',",
"    template=WORKFLOW_TEMPLATE,",
"    project_id=PROJECT_ID,",
"    location=REGION",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataproc.html#working-with-workflows-templates",
""
    ]
},
"DataprocInstantiateWorkflowTemplateOperator":{
    "prefix": "DataprocInstantiateWorkflowTemplateOperator",
    "body": [
        "DataprocInstantiateWorkflowTemplateOperator(",
"    task_id='trigger_workflow', region=REGION, project_id=PROJECT_ID, template_id=WORKFLOW_NAME",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/dataproc.html#working-with-workflows-templates",
""
    ]
},
"CloudDatastoreExportEntitiesOperator":{
    "prefix": "CloudDatastoreExportEntitiesOperator",
    "body": [
        "CloudDatastoreExportEntitiesOperator(",
"    task_id='export_task',",
"    bucket=BUCKET,",
"    project_id=GCP_PROJECT_ID,",
"    overwrite_existing=True",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datastore.html#export-entities",
""
    ]
},
"CloudDatastoreImportEntitiesOperator":{
    "prefix": "CloudDatastoreImportEntitiesOperator",
    "body": [
        "CloudDatastoreImportEntitiesOperator(",
"    task_id='import_task',",
"    bucket='{{ task_instance.xcom_pull('export_task')['response']['outputUrl'].split('/')[2] }}',",
"    file='{{ '/'.join(task_instance.xcom_pull('export_task')['response']['outputUrl'].split('/')[3:]) }}',",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datastore.html#import-entities",
""
    ]
},
"CloudDatastoreAllocateIdsOperator":{
    "prefix": "CloudDatastoreAllocateIdsOperator",
    "body": [
        "CloudDatastoreAllocateIdsOperator(",
"    task_id='allocate_ids', partial_keys=KEYS, project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datastore.html#allocate-ids",
""
    ]
},
"CloudDatastoreBeginTransactionOperator":{
    "prefix": "CloudDatastoreBeginTransactionOperator",
    "body": [
        "CloudDatastoreBeginTransactionOperator(",
"    task_id='begin_transaction_commit',",
"    transaction_options=TRANSACTION_OPTIONS,",
"    project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datastore.html#begin-transaction",
""
    ]
},
"CloudDatastoreCommitOperator":{
    "prefix": "CloudDatastoreCommitOperator",
    "body": [
        "CloudDatastoreCommitOperator(",
"    task_id='commit_task', body=COMMIT_BODY, project_id=GCP_PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datastore.html#commit-transaction",
""
    ]
},
"CloudDatastoreRunQueryOperator":{
    "prefix": "CloudDatastoreRunQueryOperator",
    "body": [
        "CloudDatastoreRunQueryOperator(task_id='run_query', body=QUERY, project_id=GCP_PROJECT_ID)",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datastore.html#run-query",
""
    ]
},
"CloudDatastoreRollbackOperator":{
    "prefix": "CloudDatastoreRollbackOperator",
    "body": [
        "CloudDatastoreRollbackOperator(",
"    task_id='rollback_transaction',",
"    transaction='{{ task_instance.xcom_pull('begin_transaction_to_rollback') }}'",
")begin_transaction_to_rollback &gt;&gt; rollback_transaction'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/datastore.html#roll-back-transaction",
""
    ]
},
"CloudFunctionDeleteFunctionOperator":{
    "prefix": "CloudFunctionDeleteFunctionOperator",
    "body": [
        "CloudFunctionDeleteFunctionOperator(task_id='gcf_delete_task', name=FUNCTION_NAME)",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/functions.html#using-the-operator",
""
    ]
},
"CloudFunctionDeployFunctionOperator":{
    "prefix": "CloudFunctionDeployFunctionOperator",
    "body": [
        "CloudFunctionDeployFunctionOperator(",
"    task_id='gcf_deploy_task',",
"    project_id=GCP_PROJECT_ID,",
"    location=GCP_LOCATION,",
"    body=body,",
"    validate_body=GCP_VALIDATE_BODY",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/functions.html#id1",
""
    ]
},
"GCSToBigQueryOperator":{
    "prefix": "GCSToBigQueryOperator",
    "body": [
        "GCSToBigQueryOperator(",
"    task_id='gcs_to_bigquery_example',",
"    bucket='cloud-samples-data',",
"    source_objects=['bigquery/us-states/us-states.csv'],",
"    destination_project_dataset_table=f'{DATASET_NAME}.{TABLE_NAME}',",
"    schema_fields=[",
"        {'name': 'name', 'type': 'STRING', 'mode': 'NULLABLE'},",
"        {'name': 'post_abbr', 'type': 'STRING', 'mode': 'NULLABLE'},",
"    ],",
"    write_disposition='WRITE_TRUNCATE',",
"    dag=dag",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/gcs.html#gcstobigqueryoperator",
""
    ]
},
"GCSDeleteBucketOperator":{
    "prefix": "GCSDeleteBucketOperator",
    "body": [
        "GCSDeleteBucketOperator(task_id='delete_bucket_1', bucket_name=BUCKET_1)delete_bucket_2 = GCSDeleteBucketOperator(task_id='delete_bucket_2', bucket_name=BUCKET_2)",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/gcs.html#deleting-bucket",
""
    ]
},
"GCSObjectExistenceSensor":{
    "prefix": "GCSObjectExistenceSensor",
    "body": [
        "GCSObjectExistenceSensor(",
"    bucket=BUCKET_1,",
"    object=PATH_TO_UPLOAD_FILE,",
"    mode='poke',",
"    task_id='gcs_object_exists_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/gcs.html#gcsobjectexistencesensor",
""
    ]
},
"GCSObjectsWithPrefixExistenceSensor":{
    "prefix": "GCSObjectsWithPrefixExistenceSensor",
    "body": [
        "GCSObjectsWithPrefixExistenceSensor(",
"    bucket=BUCKET_1,",
"    prefix=PATH_TO_UPLOAD_FILE_PREFIX,",
"    mode='poke',",
"    task_id='gcs_object_with_prefix_exists_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/gcs.html#gcsobjectswithprefixexistencesensor",
""
    ]
},
"GKECreateClusterOperator":{
    "prefix": "GKECreateClusterOperator",
    "body": [
        "GKECreateClusterOperator(",
"    task_id='create_cluster',",
"    project_id=GCP_PROJECT_ID,",
"    location=GCP_LOCATION,",
"    body=CLUSTER",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/kubernetes_engine.html#create-gke-cluster",
""
    ]
},
"GKEDeleteClusterOperator":{
    "prefix": "GKEDeleteClusterOperator",
    "body": [
        "GKEDeleteClusterOperator(",
"    task_id='delete_cluster',",
"    name=CLUSTER_NAME,",
"    project_id=GCP_PROJECT_ID,",
"    location=GCP_LOCATION",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/kubernetes_engine.html#delete-gke-cluster",
""
    ]
},
"GKEStartPodOperator":{
    "prefix": "GKEStartPodOperator",
    "body": [
        "GKEStartPodOperator(",
"    task_id='pod_task_xcom',",
"    project_id=GCP_PROJECT_ID,",
"    location=GCP_LOCATION,",
"    cluster_name=CLUSTER_NAME,",
"    do_xcom_push=True,",
"    namespace='default',",
"    image='alpine',",
"    cmds=['sh', '-c', 'mkdir -p /airflow/xcom/;echo '[1,2,3,4]' &gt; /airflow/xcom/return.json'],",
"    name='test-pod-xcom'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/kubernetes_engine.html#use-of-xcom",
""
    ]
},
"LifeSciencesRunPipelineOperator":{
    "prefix": "LifeSciencesRunPipelineOperator",
    "body": [
        "LifeSciencesRunPipelineOperator(",
"        task_id='simple-action-pipeline',",
"        body=SIMPLE_ACTION_PIPELINE,",
"        project_id=PROJECT_ID,",
"        location=LOCATION,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/life_sciences.html#running-a-pipeline",
""
    ]
},
"MLEngineStartTrainingJobOperator":{
    "prefix": "MLEngineStartTrainingJobOperator",
    "body": [
        "MLEngineStartTrainingJobOperator(",
"    task_id='training',",
"    project_id=PROJECT_ID,",
"    region='us-central1',",
"    job_id='training-job-{{ ts_nodash }}-{{ params.model_name }}',",
"    runtime_version='1.15',",
"    python_version='3.7',",
"    job_dir=JOB_DIR,",
"    package_uris=[TRAINER_URI],",
"    training_python_module=TRAINER_PY_MODULE,",
"    training_args=[],",
"    labels={'job_type': 'training'}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#launching-a-job",
""
    ]
},
"MLEngineCreateModelOperator":{
    "prefix": "MLEngineCreateModelOperator",
    "body": [
        "MLEngineCreateModelOperator(",
"    task_id='create-model',",
"    project_id=PROJECT_ID,",
"    model={",
"        'name': MODEL_NAME,",
"    }",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#creating-a-model",
""
    ]
},
"MLEngineGetModelOperator":{
    "prefix": "MLEngineGetModelOperator",
    "body": [
        "MLEngineGetModelOperator(",
"    task_id='get-model',",
"    project_id=PROJECT_ID,",
"    model_name=MODEL_NAME",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#getting-a-model",
""
    ]
},
"MLEngineCreateVersionOperator":{
    "prefix": "MLEngineCreateVersionOperator",
    "body": [
        "MLEngineCreateVersionOperator(",
"    task_id='create-version',",
"    project_id=PROJECT_ID,",
"    model_name=MODEL_NAME,",
"    version={",
"        'name': 'v1',",
"        'description': 'First-version',",
"        'deployment_uri': f'{JOB_DIR}/keras_export/',",
"        'runtime_version': '1.15',",
"        'machineType': 'mls1-c1-m2',",
"        'framework': 'TENSORFLOW',",
"        'pythonVersion': '3.7',",
"    }",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#creating-model-versions",
""
    ]
},
"MLEngineSetDefaultVersionOperator":{
    "prefix": "MLEngineSetDefaultVersionOperator",
    "body": [
        "MLEngineSetDefaultVersionOperator(",
"    task_id='set-default-version',",
"    project_id=PROJECT_ID,",
"    model_name=MODEL_NAME,",
"    version_name='v2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#managing-model-versions",
""
    ]
},
"MLEngineListVersionsOperator":{
    "prefix": "MLEngineListVersionsOperator",
    "body": [
        "MLEngineListVersionsOperator(",
"    task_id='list-version',",
"    project_id=PROJECT_ID,",
"    model_name=MODEL_NAME",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#managing-model-versions",
""
    ]
},
"MLEngineStartBatchPredictionJobOperator":{
    "prefix": "MLEngineStartBatchPredictionJobOperator",
    "body": [
        "MLEngineStartBatchPredictionJobOperator(",
"    task_id='prediction',",
"    project_id=PROJECT_ID,",
"    job_id='prediction-{{ ts_nodash }}-{{ params.model_name }}',",
"    region='us-central1',",
"    model_name=MODEL_NAME,",
"    data_format='TEXT',",
"    input_paths=[PREDICTION_INPUT],",
"    output_path=PREDICTION_OUTPUT,",
"    labels={'job_type': 'prediction'}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#making-predictions",
""
    ]
},
"MLEngineDeleteVersionOperator":{
    "prefix": "MLEngineDeleteVersionOperator",
    "body": [
        "MLEngineDeleteVersionOperator(",
"    task_id='delete-version', project_id=PROJECT_ID, model_name=MODEL_NAME, version_name='v1'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#cleaning-up",
""
    ]
},
"MLEngineDeleteModelOperator":{
    "prefix": "MLEngineDeleteModelOperator",
    "body": [
        "MLEngineDeleteModelOperator(",
"    task_id='delete-model', project_id=PROJECT_ID, model_name=MODEL_NAME, delete_contents=True",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/mlengine.html#cleaning-up",
""
    ]
},
"CloudNaturalLanguageAnalyzeEntitiesOperator":{
    "prefix": "CloudNaturalLanguageAnalyzeEntitiesOperator",
    "body": [
        "CloudNaturalLanguageAnalyzeEntitiesOperator(",
"    document=document, task_id='analyze_entities'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/natural_language.html#analyzing-entities",
""
    ]
},
"CloudNaturalLanguageAnalyzeEntitySentimentOperator":{
    "prefix": "CloudNaturalLanguageAnalyzeEntitySentimentOperator",
    "body": [
        "CloudNaturalLanguageAnalyzeEntitySentimentOperator(",
"    document=document, task_id='analyze_entity_sentiment'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/natural_language.html#analyzing-entity-sentiment",
""
    ]
},
"CloudNaturalLanguageAnalyzeSentimentOperator":{
    "prefix": "CloudNaturalLanguageAnalyzeSentimentOperator",
    "body": [
        "CloudNaturalLanguageAnalyzeSentimentOperator(",
"    document=document, task_id='analyze_sentiment'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/natural_language.html#analyzing-sentiment",
""
    ]
},
"CloudNaturalLanguageClassifyTextOperator":{
    "prefix": "CloudNaturalLanguageClassifyTextOperator",
    "body": [
        "CloudNaturalLanguageClassifyTextOperator(",
"    document=document, task_id='analyze_classify_text'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/natural_language.html#classifying-content",
""
    ]
},
"PubSubCreateTopicOperator":{
    "prefix": "PubSubCreateTopicOperator",
    "body": [
        "PubSubCreateTopicOperator(",
"        task_id='create_topic', topic=TOPIC_FOR_SENSOR_DAG, project_id=GCP_PROJECT_ID, fail_if_exists=False",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/pubsub.html#creating-a-pubsub-topic",
""
    ]
},
"PubSubCreateSubscriptionOperator":{
    "prefix": "PubSubCreateSubscriptionOperator",
    "body": [
        "PubSubCreateSubscriptionOperator(",
"        task_id='subscribe_task', project_id=GCP_PROJECT_ID, topic=TOPIC_FOR_SENSOR_DAG",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/pubsub.html#creating-a-pubsub-subscription",
""
    ]
},
"PubSubPublishMessageOperator":{
    "prefix": "PubSubPublishMessageOperator",
    "body": [
        "PubSubPublishMessageOperator(",
"        task_id='publish_task',",
"        project_id=GCP_PROJECT_ID,",
"        topic=TOPIC_FOR_SENSOR_DAG,",
"        messages=[MESSAGE] * 10,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/pubsub.html#publishing-pubsub-messages",
""
    ]
},
"PubSubDeleteSubscriptionOperator":{
    "prefix": "PubSubDeleteSubscriptionOperator",
    "body": [
        "PubSubDeleteSubscriptionOperator(",
"        task_id='unsubscribe_task',",
"        project_id=GCP_PROJECT_ID,",
"        subscription='{{ task_instance.xcom_pull('subscribe_task') }}',",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/pubsub.html#deleting-a-pubsub-subscription",
""
    ]
},
"PubSubDeleteTopicOperator":{
    "prefix": "PubSubDeleteTopicOperator",
    "body": [
        "PubSubDeleteTopicOperator(",
"        task_id='delete_topic', topic=TOPIC_FOR_SENSOR_DAG, project_id=GCP_PROJECT_ID",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/pubsub.html#deleting-a-pubsub-topic",
""
    ]
},
"SpannerDeployInstanceOperator":{
    "prefix": "SpannerDeployInstanceOperator",
    "body": [
        "SpannerDeployInstanceOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    configuration_name=GCP_SPANNER_CONFIG_NAME,",
"    node_count=int(GCP_SPANNER_NODE_COUNT),",
"    display_name=GCP_SPANNER_DISPLAY_NAME,",
"    task_id='spanner_instance_create_task'",
")spanner_instance_update_task = SpannerDeployInstanceOperator(",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    configuration_name=GCP_SPANNER_CONFIG_NAME,",
"    node_count=int(GCP_SPANNER_NODE_COUNT) + 1,",
"    display_name=GCP_SPANNER_DISPLAY_NAME + '_updated',",
"    task_id='spanner_instance_update_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/spanner.html#using-the-operator",
""
    ]
},
"SpannerDeleteDatabaseInstanceOperator":{
    "prefix": "SpannerDeleteDatabaseInstanceOperator",
    "body": [
        "SpannerDeleteDatabaseInstanceOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    database_id=GCP_SPANNER_DATABASE_ID,",
"    task_id='spanner_database_delete_task'",
")spanner_database_delete_task2 = SpannerDeleteDatabaseInstanceOperator(",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    database_id=GCP_SPANNER_DATABASE_ID,",
"    task_id='spanner_database_delete_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/spanner.html#id1",
""
    ]
},
"SpannerDeployDatabaseInstanceOperator":{
    "prefix": "SpannerDeployDatabaseInstanceOperator",
    "body": [
        "SpannerDeployDatabaseInstanceOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    database_id=GCP_SPANNER_DATABASE_ID,",
"    ddl_statements=[",
"        'CREATE TABLE my_table1 (id INT64, name STRING(MAX)) PRIMARY KEY (id),",
"        'CREATE TABLE my_table2 (id INT64, name STRING(MAX)) PRIMARY KEY (id),",
"    ],",
"    task_id='spanner_database_deploy_task'",
")spanner_database_deploy_task2 = SpannerDeployDatabaseInstanceOperator(",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    database_id=GCP_SPANNER_DATABASE_ID,",
"    ddl_statements=[",
"        'CREATE TABLE my_table1 (id INT64, name STRING(MAX)) PRIMARY KEY (id),",
"        'CREATE TABLE my_table2 (id INT64, name STRING(MAX)) PRIMARY KEY (id),",
"    ],",
"    task_id='spanner_database_deploy_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/spanner.html#id4",
""
    ]
},
"SpannerUpdateDatabaseInstanceOperator":{
    "prefix": "SpannerUpdateDatabaseInstanceOperator",
    "body": [
        "SpannerUpdateDatabaseInstanceOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    database_id=GCP_SPANNER_DATABASE_ID,",
"    ddl_statements=[",
"        'CREATE TABLE my_table3 (id INT64, name STRING(MAX)) PRIMARY KEY (id),",
"    ],",
"    task_id='spanner_database_update_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/spanner.html#id7",
""
    ]
},
"SpannerQueryDatabaseInstanceOperator":{
    "prefix": "SpannerQueryDatabaseInstanceOperator",
    "body": [
        "SpannerQueryDatabaseInstanceOperator(",
"    project_id=GCP_PROJECT_ID,",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    database_id=GCP_SPANNER_DATABASE_ID,",
"    query=['DELETE FROM my_table2 WHERE true'],",
"    task_id='spanner_instance_query_task'",
")spanner_instance_query_task2 = SpannerQueryDatabaseInstanceOperator(",
"    instance_id=GCP_SPANNER_INSTANCE_ID,",
"    database_id=GCP_SPANNER_DATABASE_ID,",
"    query=['DELETE FROM my_table2 WHERE true'],",
"    task_id='spanner_instance_query_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/spanner.html#id10",
""
    ]
},
"SpannerDeleteInstanceOperator":{
    "prefix": "SpannerDeleteInstanceOperator",
    "body": [
        "SpannerDeleteInstanceOperator(",
"    project_id=GCP_PROJECT_ID, instance_id=GCP_SPANNER_INSTANCE_ID, task_id='spanner_instance_delete_task'",
")spanner_instance_delete_task2 = SpannerDeleteInstanceOperator(",
"    instance_id=GCP_SPANNER_INSTANCE_ID, task_id='spanner_instance_delete_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/spanner.html#id13",
""
    ]
},
"CloudSpeechToTextRecognizeSpeechOperator":{
    "prefix": "CloudSpeechToTextRecognizeSpeechOperator",
    "body": [
        "CloudSpeechToTextRecognizeSpeechOperator(",
"    config=CONFIG, audio=AUDIO, task_id='speech_to_text_recognize_task'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/speech_to_text.html#using-the-operator",
""
    ]
},
"StackdriverListAlertPoliciesOperator":{
    "prefix": "StackdriverListAlertPoliciesOperator",
    "body": [
        "StackdriverListAlertPoliciesOperator(",
"    task_id='list-alert-policies'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#using-the-operator",
""
    ]
},
"StackdriverEnableAlertPoliciesOperator":{
    "prefix": "StackdriverEnableAlertPoliciesOperator",
    "body": [
        "StackdriverEnableAlertPoliciesOperator(",
"    task_id='enable-alert-policies',",
"    filter_='(displayName='test alert 1' OR displayName='test alert 2",
");",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#id1",
""
    ]
},
"StackdriverDisableAlertPoliciesOperator":{
    "prefix": "StackdriverDisableAlertPoliciesOperator",
    "body": [
        "StackdriverDisableAlertPoliciesOperator(",
"    task_id='disable-alert-policies',",
"    filter_='displayName='test alert 1'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#id2",
""
    ]
},
"StackdriverUpsertAlertOperator":{
    "prefix": "StackdriverUpsertAlertOperator",
    "body": [
        "StackdriverUpsertAlertOperator(",
"    task_id='create-alert-policies',",
"    alerts=json.dumps({'policies': [TEST_ALERT_POLICY_1, TEST_ALERT_POLICY_2]})",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#id3",
""
    ]
},
"StackdriverDeleteAlertOperator":{
    "prefix": "StackdriverDeleteAlertOperator",
    "body": [
        "StackdriverDeleteAlertOperator(",
"    task_id='delete-alert-policy',",
"    name='{{ task_instance.xcom_pull('list-alert-policies')[0]['name'] }}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#id4",
""
    ]
},
"StackdriverListNotificationChannelsOperator":{
    "prefix": "StackdriverListNotificationChannelsOperator",
    "body": [
        "StackdriverListNotificationChannelsOperator(",
"    task_id='list-notification-channel', filter_='type='slack'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#id5",
""
    ]
},
"StackdriverEnableNotificationChannelsOperator":{
    "prefix": "StackdriverEnableNotificationChannelsOperator",
    "body": [
        "StackdriverEnableNotificationChannelsOperator(",
"    task_id='enable-notification-channel', filter_='type='slack'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#id6",
""
    ]
},
"StackdriverDisableNotificationChannelsOperator":{
    "prefix": "StackdriverDisableNotificationChannelsOperator",
    "body": [
        "StackdriverDisableNotificationChannelsOperator(",
"    task_id='disable-notification-channel', filter_='displayName='channel1'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#id7",
""
    ]
},
"StackdriverDeleteNotificationChannelOperator":{
    "prefix": "StackdriverDeleteNotificationChannelOperator",
    "body": [
        "StackdriverDeleteNotificationChannelOperator(",
"    task_id='delete-notification-channel',",
"    name='{{ task_instance.xcom_pull('list-notification-channel')[0]['name'] }}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/stackdriver.html#id9",
""
    ]
},
"CloudTextToSpeechSynthesizeOperator":{
    "prefix": "CloudTextToSpeechSynthesizeOperator",
    "body": [
        "CloudTextToSpeechSynthesizeOperator(",
"    project_id=GCP_PROJECT_ID,",
"    input_data=INPUT,",
"    voice=VOICE,",
"    audio_config=AUDIO_CONFIG,",
"    target_bucket_name=BUCKET_NAME,",
"    target_filename=FILENAME,",
"    task_id='text_to_speech_synthesize_task'",
")text_to_speech_synthesize_task2 = CloudTextToSpeechSynthesizeOperator(",
"    input_data=INPUT,",
"    voice=VOICE,",
"    audio_config=AUDIO_CONFIG,",
"    target_bucket_name=BUCKET_NAME,",
"    target_filename=FILENAME,",
"    task_id='text_to_speech_synthesize_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/text_to_speech.html#using-the-operator",
""
    ]
},
"CloudTranslateTextOperator":{
    "prefix": "CloudTranslateTextOperator",
    "body": [
        "CloudTranslateTextOperator(",
"    task_id='translate',",
"    values=['zażółć gęślą jaźń'],",
"    target_language='en',",
"    format_='text',",
"    source_language=None,",
"    model='base'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/translate.html#using-the-operator",
""
    ]
},
"CloudTranslateSpeechOperator":{
    "prefix": "CloudTranslateSpeechOperator",
    "body": [
        "CloudTranslateSpeechOperator(",
"    project_id=GCP_PROJECT_ID,",
"    audio=AUDIO,",
"    config=CONFIG,",
"    target_language=TARGET_LANGUAGE,",
"    format_=FORMAT,",
"    source_language=SOURCE_LANGUAGE,",
"    model=MODEL,",
"    task_id='translate_speech_task'",
")translate_speech_task2 = CloudTranslateSpeechOperator(",
"    audio=AUDIO,",
"    config=CONFIG,",
"    target_language=TARGET_LANGUAGE,",
"    format_=FORMAT,",
"    source_language=SOURCE_LANGUAGE,",
"    model=MODEL,",
"    task_id='translate_speech_task2'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/translate_speech.html#using-the-operator",
""
    ]
},
"CloudVideoIntelligenceDetectVideoLabelsOperator":{
    "prefix": "CloudVideoIntelligenceDetectVideoLabelsOperator",
    "body": [
        "CloudVideoIntelligenceDetectVideoLabelsOperator(",
"    input_uri=INPUT_URI,",
"    output_uri=None,",
"    video_context=None,",
"    timeout=5,",
"    task_id='detect_video_label'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/video_intelligence.html#using-the-operator",
""
    ]
},
"CloudVideoIntelligenceDetectVideoExplicitContentOperator":{
    "prefix": "CloudVideoIntelligenceDetectVideoExplicitContentOperator",
    "body": [
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator(",
"    input_uri=INPUT_URI,",
"    output_uri=None,",
"    video_context=None,",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='detect_video_explicit_content'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/video_intelligence.html#id1",
""
    ]
},
"CloudVideoIntelligenceDetectVideoShotsOperator":{
    "prefix": "CloudVideoIntelligenceDetectVideoShotsOperator",
    "body": [
        "CloudVideoIntelligenceDetectVideoShotsOperator(",
"    input_uri=INPUT_URI,",
"    output_uri=None,",
"    video_context=None,",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='detect_video_shots'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/video_intelligence.html#id5",
""
    ]
},
"CloudVisionAddProductToProductSetOperator":{
    "prefix": "CloudVisionAddProductToProductSetOperator",
    "body": [
        "CloudVisionAddProductToProductSetOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_set_id='{{ task_instance.xcom_pull('product_set_create') }}',",
"    product_id='{{ task_instance.xcom_pull('product_create') }}',",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='add_product_to_product_set'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#using-the-operator",
""
    ]
},
"CloudVisionImageAnnotateOperator":{
    "prefix": "CloudVisionImageAnnotateOperator",
    "body": [
        "CloudVisionImageAnnotateOperator(",
"    request=annotate_image_request, retry=Retry(maximum=10.0), timeout=5, task_id='annotate_image'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id1",
""
    ]
},
"CloudVisionCreateProductOperator":{
    "prefix": "CloudVisionCreateProductOperator",
    "body": [
        "CloudVisionCreateProductOperator(",
"    location=GCP_VISION_LOCATION,",
"    product=product,",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='product_create'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id4",
""
    ]
},
"CloudVisionDeleteProductOperator":{
    "prefix": "CloudVisionDeleteProductOperator",
    "body": [
        "CloudVisionDeleteProductOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_id='{{ task_instance.xcom_pull('product_create') }}',",
"    task_id='product_delete'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id7",
""
    ]
},
"CloudVisionGetProductOperator":{
    "prefix": "CloudVisionGetProductOperator",
    "body": [
        "CloudVisionGetProductOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_id='{{ task_instance.xcom_pull('product_create') }}',",
"    task_id='product_get'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id10",
""
    ]
},
"CloudVisionCreateProductSetOperator":{
    "prefix": "CloudVisionCreateProductSetOperator",
    "body": [
        "CloudVisionCreateProductSetOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_set=product_set,",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='product_set_create'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id13",
""
    ]
},
"CloudVisionDeleteProductSetOperator":{
    "prefix": "CloudVisionDeleteProductSetOperator",
    "body": [
        "CloudVisionDeleteProductSetOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_set_id='{{ task_instance.xcom_pull('product_set_create') }}',",
"    task_id='product_set_delete'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id16",
""
    ]
},
"CloudVisionGetProductSetOperator":{
    "prefix": "CloudVisionGetProductSetOperator",
    "body": [
        "CloudVisionGetProductSetOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_set_id='{{ task_instance.xcom_pull('product_set_create') }}',",
"    task_id='product_set_get'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id19",
""
    ]
},
"CloudVisionUpdateProductSetOperator":{
    "prefix": "CloudVisionUpdateProductSetOperator",
    "body": [
        "CloudVisionUpdateProductSetOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_set_id='{{ task_instance.xcom_pull('product_set_create') }}',",
"    product_set=ProductSet(display_name='My Product Set 2'),",
"    task_id='product_set_update'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id22",
""
    ]
},
"CloudVisionUpdateProductOperator":{
    "prefix": "CloudVisionUpdateProductOperator",
    "body": [
        "CloudVisionUpdateProductOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_id='{{ task_instance.xcom_pull('product_create') }}',",
"    product=Product(display_name='My Product 2', description='My updated description'),",
"    task_id='product_update'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id25",
""
    ]
},
"CloudVisionCreateReferenceImageOperator":{
    "prefix": "CloudVisionCreateReferenceImageOperator",
    "body": [
        "CloudVisionCreateReferenceImageOperator(",
"    location=GCP_VISION_LOCATION,",
"    reference_image=reference_image,",
"    product_id='{{ task_instance.xcom_pull('product_create') }}',",
"    reference_image_id=GCP_VISION_REFERENCE_IMAGE_ID,",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='reference_image_create'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id28",
""
    ]
},
"CloudVisionDeleteReferenceImageOperator":{
    "prefix": "CloudVisionDeleteReferenceImageOperator",
    "body": [
        "CloudVisionDeleteReferenceImageOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_id='{{ task_instance.xcom_pull('product_create') }}',",
"    reference_image_id=GCP_VISION_REFERENCE_IMAGE_ID,",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='reference_image_delete'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id31",
""
    ]
},
"CloudVisionRemoveProductFromProductSetOperator":{
    "prefix": "CloudVisionRemoveProductFromProductSetOperator",
    "body": [
        "CloudVisionRemoveProductFromProductSetOperator(",
"    location=GCP_VISION_LOCATION,",
"    product_set_id='{{ task_instance.xcom_pull('product_set_create') }}',",
"    product_id='{{ task_instance.xcom_pull('product_create') }}',",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='remove_product_from_product_set'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id34",
""
    ]
},
"CloudVisionDetectTextOperator":{
    "prefix": "CloudVisionDetectTextOperator",
    "body": [
        "CloudVisionDetectTextOperator(",
"    image=DETECT_IMAGE,",
"    retry=Retry(maximum=10.0),",
"    timeout=5,",
"    task_id='detect_text',",
"    language_hints='en',",
"    web_detection_params={'include_geo_results': True}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id37",
""
    ]
},
"CloudVisionTextDetectOperator":{
    "prefix": "CloudVisionTextDetectOperator",
    "body": [
        "CloudVisionTextDetectOperator(",
"    image=DETECT_IMAGE, retry=Retry(maximum=10.0), timeout=5, task_id='document_detect_text'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id40",
""
    ]
},
"CloudVisionDetectImageLabelsOperator":{
    "prefix": "CloudVisionDetectImageLabelsOperator",
    "body": [
        "CloudVisionDetectImageLabelsOperator(",
"    image=DETECT_IMAGE, retry=Retry(maximum=10.0), timeout=5, task_id='detect_labels'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id43",
""
    ]
},
"CloudVisionDetectImageSafeSearchOperator":{
    "prefix": "CloudVisionDetectImageSafeSearchOperator",
    "body": [
        "CloudVisionDetectImageSafeSearchOperator(",
"    image=DETECT_IMAGE, retry=Retry(maximum=10.0), timeout=5, task_id='detect_safe_search'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/vision.html#id46",
""
    ]
},
"WorkflowsCreateWorkflowOperator":{
    "prefix": "WorkflowsCreateWorkflowOperator",
    "body": [
        "WorkflowsCreateWorkflowOperator(",
"    task_id='create_workflow',",
"    location=LOCATION,",
"    project_id=PROJECT_ID,",
"    workflow=WORKFLOW,",
"    workflow_id=WORKFLOW_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#create-workflow",
""
    ]
},
"WorkflowsUpdateWorkflowOperator":{
    "prefix": "WorkflowsUpdateWorkflowOperator",
    "body": [
        "WorkflowsUpdateWorkflowOperator(",
"    task_id='update_workflows',",
"    location=LOCATION,",
"    project_id=PROJECT_ID,",
"    workflow_id=WORKFLOW_ID,",
"    update_mask={'paths': ['name', 'description']}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#update-workflow",
""
    ]
},
"WorkflowsGetWorkflowOperator":{
    "prefix": "WorkflowsGetWorkflowOperator",
    "body": [
        "WorkflowsGetWorkflowOperator(",
"    task_id='get_workflow', location=LOCATION, project_id=PROJECT_ID, workflow_id=WORKFLOW_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#get-workflow",
""
    ]
},
"WorkflowsListWorkflowsOperator":{
    "prefix": "WorkflowsListWorkflowsOperator",
    "body": [
        "WorkflowsListWorkflowsOperator(",
"    task_id='list_workflows',",
"    location=LOCATION,",
"    project_id=PROJECT_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#list-workflows",
""
    ]
},
"WorkflowsDeleteWorkflowOperator":{
    "prefix": "WorkflowsDeleteWorkflowOperator",
    "body": [
        "WorkflowsDeleteWorkflowOperator(",
"    task_id='delete_workflow', location=LOCATION, project_id=PROJECT_ID, workflow_id=WORKFLOW_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#delete-workflow",
""
    ]
},
"WorkflowsCreateExecutionOperator":{
    "prefix": "WorkflowsCreateExecutionOperator",
    "body": [
        "WorkflowsCreateExecutionOperator(",
"    task_id='create_execution',",
"    location=LOCATION,",
"    project_id=PROJECT_ID,",
"    execution=EXECUTION,",
"    workflow_id=WORKFLOW_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#create-execution",
""
    ]
},
"WorkflowExecutionSensor":{
    "prefix": "WorkflowExecutionSensor",
    "body": [
        "WorkflowExecutionSensor(",
"    task_id='wait_for_execution',",
"    location=LOCATION,",
"    project_id=PROJECT_ID,",
"    workflow_id=WORKFLOW_ID,",
"    execution_id='{{ task_instance.xcom_pull('create_execution', key='execution_id') }}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#create-execution",
""
    ]
},
"WorkflowsGetExecutionOperator":{
    "prefix": "WorkflowsGetExecutionOperator",
    "body": [
        "WorkflowsGetExecutionOperator(",
"    task_id='get_execution',",
"    location=LOCATION,",
"    project_id=PROJECT_ID,",
"    workflow_id=WORKFLOW_ID,",
"    execution_id='{{ task_instance.xcom_pull('create_execution', key='execution_id') }}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#get-execution",
""
    ]
},
"WorkflowsListExecutionsOperator":{
    "prefix": "WorkflowsListExecutionsOperator",
    "body": [
        "WorkflowsListExecutionsOperator(",
"    task_id='list_executions', location=LOCATION, project_id=PROJECT_ID, workflow_id=WORKFLOW_ID",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#list-executions",
""
    ]
},
"WorkflowsCancelExecutionOperator":{
    "prefix": "WorkflowsCancelExecutionOperator",
    "body": [
        "WorkflowsCancelExecutionOperator(",
"    task_id='cancel_execution',",
"    location=LOCATION,",
"    project_id=PROJECT_ID,",
"    workflow_id=SLEEP_WORKFLOW_ID,",
"    execution_id='{{ task_instance.xcom_pull('create_execution_for_cancel', key='execution_id') }}'",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/operators/cloud/workflows.html#cancel-execution",
""
    ]
},
"DatabricksSubmitRunOperator":{
    "prefix": "DatabricksSubmitRunOperator",
    "body": [
        "DatabricksSubmitRunOperator(task_id='notebook_task', json=notebook_task_params)",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-databricks/stable/operators.html#id1",
""
    ]
},
"AzureDataLakeStorageDeleteOperator":{
    "prefix": "AzureDataLakeStorageDeleteOperator",
    "body": [
        "AzureDataLakeStorageDeleteOperator(",
"        task_id='delete_task', path=REMOTE_FILE_PATH, recursive=True",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-microsoft-azure/stable/operators/adls.html#azuredatalakestoragedeleteoperator",
""
    ]
},
"AzureBlobStorageToGCSOperator":{
    "prefix": "AzureBlobStorageToGCSOperator",
    "body": [
        "AzureBlobStorageToGCSOperator(",
"    task_id='transfer_files_to_gcs',",
"    # AZURE args",
"    wasb_conn_id='wasb_default',",
"    container_name=AZURE_CONTAINER_NAME,",
"    blob_name=BLOB_NAME,",
"    file_path=GCP_OBJECT_NAME,",
"    # GCP args",
"    gcp_conn_id='google_cloud_default',",
"    bucket_name=GCP_BUCKET_NAME,",
"    object_name=GCP_OBJECT_NAME,",
"    filename=GCP_BUCKET_FILE_PATH,",
"    gzip=False,",
"    delegate_to=None,",
"    impersonation_chain=None",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-microsoft-azure/stable/operators/azure_blob_to_gcs.html#transfer-data-from-blob-storage-to-google-cloud-storage",
""
    ]
},
"LocalToAzureDataLakeStorageOperator":{
    "prefix": "LocalToAzureDataLakeStorageOperator",
    "body": [
        "LocalToAzureDataLakeStorageOperator(",
"        task_id='upload_task',",
"        local_path=LOCAL_FILE_PATH,",
"        remote_path=REMOTE_FILE_PATH,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-microsoft-azure/stable/operators/local_to_adls.html#localtoazuredatalakestorageoperator",
""
    ]
},
"AWSDataSyncOperator":{
    "prefix": "AWSDataSyncOperator",
    "body": [
        "AWSDataSyncOperator(",
"        aws_conn_id='aws_default', task_id='datasync_task_1', task_arn=TASK_ARN",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/datasync.html#get-datasync-tasks",
""
    ]
},
"ECSOperator":{
    "prefix": "ECSOperator",
    "body": [
        "ECSOperator(",
"    task_id='hello_world',",
"    dag=dag,",
"    aws_conn_id='aws_ecs',",
"    cluster='c',",
"    task_definition='hello-world',",
"    launch_type='FARGATE',",
"    overrides={",
"        'containerOverrides': [",
"            {",
"                'name': 'hello-world-container',",
"                'command': ['echo', 'hello', 'world'],",
"            },",
"        ],",
"    },",
"    network_configuration={",
"        'awsvpcConfiguration': {",
"            'securityGroups': [os.environ.get('SECURITY_GROUP_ID', 'sg-123abc')],",
"            'subnets': [os.environ.get('SUBNET_ID', 'subnet-123456ab')],",
"        },",
"    },",
"    tags={",
"        'Customer': 'X',",
"        'Project': 'Y',",
"        'Application': 'Z',",
"        'Version': '0.0.1',",
"        'Environment': 'Development',",
"    },",
"    awslogs_group='/ecs/hello-world',",
"    awslogs_stream_prefix='prefix_b/hello-world-container',  # prefix with container name",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/ecs.html#using-operator",
""
    ]
},
"EmrCreateJobFlowOperator":{
    "prefix": "EmrCreateJobFlowOperator",
    "body": [
        "EmrCreateJobFlowOperator(",
"        task_id='create_job_flow',",
"        job_flow_overrides=JOB_FLOW_OVERRIDES,",
"        aws_conn_id='aws_default',",
"        emr_conn_id='emr_default',",
"    )",
"    job_sensor = EmrJobFlowSensor(",
"        task_id='check_job_flow',",
"        job_flow_id='{{ task_instance.xcom_pull(task_ids='create_job_flow', key='return_value') }}',",
"        aws_conn_id='aws_default',",
"    )",
"    job_flow_creator &gt;&gt; job_sensor'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/emr.html#defining-tasks",
""
    ]
},
"GlacierCreateJobOperator":{
    "prefix": "GlacierCreateJobOperator",
    "body": [
        "GlacierCreateJobOperator(",
"    task_id='create_glacier_job',",
"    aws_conn_id='aws_default',",
"    vault_name=VAULT_NAME",
")JOB_ID = '{{ task_instance.xcom_pull('create_glacier_job')['jobId'] }}'",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/glacier.html#glaciercreatejoboperator",
""
    ]
},
"GlacierToGCSOperator":{
    "prefix": "GlacierToGCSOperator",
    "body": [
        "GlacierToGCSOperator(",
"    task_id='transfer_archive_to_gcs',",
"    aws_conn_id='aws_default',",
"    gcp_conn_id='google_cloud_default',",
"    vault_name=VAULT_NAME,",
"    bucket_name=BUCKET_NAME,",
"    object_name=OBJECT_NAME,",
"    gzip=False,",
"    # Override to match your needs",
"    # If chunk size is bigger than actual file size",
"    # then whole file will be downloaded",
"    chunk_size=1024,",
"    delegate_to=None,",
"    google_impersonation_chain=None",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/glacier.html#glacierjoboperationsensor",
""
    ]
},
"GoogleApiToS3Operator":{
    "prefix": "GoogleApiToS3Operator",
    "body": [
        "GoogleApiToS3Operator(",
"        google_api_service_name='sheets',",
"        google_api_service_version='v4',",
"        google_api_endpoint_path='sheets.spreadsheets.values.get',",
"        google_api_endpoint_params={'spreadsheetId': GOOGLE_SHEET_ID, 'range': GOOGLE_SHEET_RANGE},",
"        s3_destination_key=S3_DESTINATION_KEY,",
"        task_id='google_sheets_values_to_s3',",
"        dag=dag,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/google_api_to_s3_transfer.html#get-google-sheets-sheet-values",
""
    ]
},
"BranchPythonOperator":{
    "prefix": "BranchPythonOperator",
    "body": [
        "BranchPythonOperator(",
"        python_callable=_check_and_transform_video_ids,",
"        op_args=[task_video_ids_to_s3.google_api_response_via_xcom, task_video_ids_to_s3.task_id],",
"        task_id='check_and_transform_video_ids',",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/google_api_to_s3_transfer.html#get-youtube-videos",
""
    ]
},
"DummyOperator":{
    "prefix": "DummyOperator",
    "body": [
        "DummyOperator(task_id='no_video_ids')",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/google_api_to_s3_transfer.html#get-youtube-videos",
""
    ]
},
"ImapAttachmentToS3Operator":{
    "prefix": "ImapAttachmentToS3Operator",
    "body": [
        "ImapAttachmentToS3Operator(",
"        imap_attachment_name=IMAP_ATTACHMENT_NAME,",
"        s3_key=S3_DESTINATION_KEY,",
"        imap_mail_folder=IMAP_MAIL_FOLDER,",
"        imap_mail_filter=IMAP_MAIL_FILTER,",
"        task_id='transfer_imap_attachment_to_s3',",
"        dag=dag,",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/imap_attachment_to_s3.html#transfer-mail-attachments-via-imap-to-s3",
""
    ]
},
"S3ToRedshiftOperator":{
    "prefix": "S3ToRedshiftOperator",
    "body": [
        "S3ToRedshiftOperator(",
"        s3_bucket=S3_BUCKET,",
"        s3_key=S3_KEY,",
"        schema='PUBLIC',",
"        table=REDSHIFT_TABLE,",
"        copy_options=['csv'],",
"        task_id='transfer_s3_to_redshift',",
"    )",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/operators/s3_to_redshift.html#copy-s3-key-into-redshift-table",
""
    ]
},
"PapermillOperator":{
    "prefix": "PapermillOperator",
    "body": [
        "PapermillOperator(",
"    task_id='run_example_notebook',",
"    input_nb='/tmp/hello_world.ipynb',",
"    output_nb='/tmp/out-{{ execution_date }}.ipynb',",
"    parameters={'msgs': 'Ran from Airflow at {{ execution_date }}!'}",
")",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-papermill/stable/operators.html#example-dag",
""
    ]
},
"S3ToSnowflakeOperator":{
    "prefix": "S3ToSnowflakeOperator",
    "body": [
        "S3ToSnowflakeOperator(",
"    task_id='copy_into_table',",
"    snowflake_conn_id=SNOWFLAKE_CONN_ID,",
"    s3_keys=[S3_FILE_PATH],",
"    table=SNOWFLAKE_SAMPLE_TABLE,",
"    schema=SNOWFLAKE_SCHEMA,",
"    stage=SNOWFLAKE_STAGE,",
"    file_format='(type = 'CSV',field_delimiter = ';'),",
"    dag=dag",
")",
"",
"",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-snowflake/stable/operators/s3_to_snowflake.html#using-the-operator",
""
    ]
},
"SnowflakeOperator":{
    "prefix": "SnowflakeOperator",
    "body": [
        "SnowflakeOperator(",
"    task_id='snowflake_op_sql_str',",
"    dag=dag,",
"    snowflake_conn_id=SNOWFLAKE_CONN_ID,",
"    sql=CREATE_TABLE_SQL_STRING,",
"    warehouse=SNOWFLAKE_WAREHOUSE,",
"    database=SNOWFLAKE_DATABASE,",
"    schema=SNOWFLAKE_SCHEMA,",
"    role=SNOWFLAKE_ROLE",
")",
"",
"snowflake_op_with_params = SnowflakeOperator(",
"    task_id='snowflake_op_with_params',",
"    dag=dag,",
"    snowflake_conn_id=SNOWFLAKE_CONN_ID,",
"    sql=SQL_INSERT_STATEMENT,",
"    parameters={'id': 56},",
"    warehouse=SNOWFLAKE_WAREHOUSE,",
"    database=SNOWFLAKE_DATABASE,",
"    schema=SNOWFLAKE_SCHEMA,",
"    role=SNOWFLAKE_ROLE",
")",
"",
"snowflake_op_sql_list = SnowflakeOperator(",
"    task_id='snowflake_op_sql_list', dag=dag, snowflake_conn_id=SNOWFLAKE_CONN_ID, sql=SQL_LIST",
")snowflake_op_template_file = SnowflakeOperator(",
"    task_id='snowflake_op_template_file',",
"    dag=dag,",
"    snowflake_conn_id=SNOWFLAKE_CONN_ID,",
"    sql='/path/to/sql/&lt;filename&gt;.sql'",
")",
"",
"",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-snowflake/stable/operators/snowflake.html#id1",
""
    ]
},
"SnowflakeToSlackOperator":{
    "prefix": "SnowflakeToSlackOperator",
    "body": [
        "SnowflakeToSlackOperator(",
"    task_id='slack_report',",
"    sql=SNOWFLAKE_SLACK_SQL,",
"    slack_message=SNOWFLAKE_SLACK_MESSAGE,",
"    snowflake_conn_id=SNOWFLAKE_CONN_ID,",
"    slack_conn_id=SLACK_CONN_ID,",
"    dag=dag",
")",
"",
"",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-snowflake/stable/operators/snowflake_to_slack.html#using-the-operator",
""
    ]
},
"SqliteOperator":{
    "prefix": "SqliteOperator",
    "body": [
        "SqliteOperator(",
"    task_id='create_table_sqlite',",
"    sqlite_conn_id='sqlite_conn_id',",
"    sql=r''",
"    CREATE TABLE table_name (",
"        column_1 string,",
"        column_2 string,",
"        column_3 string",
"    );",
"    '',",
"    dag=dag",
")",
"",
"",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-sqlite/stable/operators.html#id1",
""
    ]
},
"TelegramOperator":{
    "prefix": "TelegramOperator",
    "body": [
        "TelegramOperator(",
"    task_id='send_message_telegram',",
"    telegram_conn_id='telegram_conn_id',",
"    chat_id='-3222103937',",
"    text='Hello from Airflow!',",
"    dag=dag",
")",
"",
"",
"# Reference: https://airflow.apache.org/docs/apache-airflow-providers-telegram/stable/operators.html#id1",
""
    ]
},

}